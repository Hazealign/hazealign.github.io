<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Haze Lee</title>
    <description>책, 음악, 코딩, 피카츄와 함께하는 곳.</description>
    <link>http://realignist.me/</link>
    <atom:link href="http://realignist.me/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 18 Jan 2017 13:28:45 +0900</pubDate>
    <lastBuildDate>Wed, 18 Jan 2017 13:28:45 +0900</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>Redux의 개념을 RxJS와 TypeScript로 이해하기 Ver. 2</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;글에 앞서,&lt;/h3&gt;

&lt;p&gt;이 글은 @ovrmrw님의 &lt;a href=&quot;http://qiita.com/ovrmrw/items/8cca6f40d5f78909a3dc&quot;&gt;글&lt;/a&gt;을 한국어로 번역한 글입니다. 이미 꽤 인기를 얻어서 최신 버전까지 나온 글로, 제가 번역한 것은 2번째 버전입니다. 좋은 글을 번역할 수 있도록 흔쾌히 허락해주신 ovrmrw님께 다시 한번 감사의 말씀을 드립니다. 그리고 번역하다가 헷갈려할 때 도와주신 최종찬 형(@disjukr), 이재호님(@sairion)께도 감사하다는 말씀 드립니다. :D&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/advent-calendar/2016/redux&quot;&gt;Redux Advent Calendar 2016&lt;/a&gt; 15일차입니다. 치키 씨입니다.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;서론과 반성&lt;/h2&gt;

&lt;p&gt;이 글은 필자가 Qiita에 투고한 글 중 제일 스톡이 많이 된 글인 &lt;a href=&quot;http://qiita.com/ovrmrw/items/89c79fae4a2acd8159fc&quot;&gt;초심자를 위한 Redux의 개념을 RxJS와 TypeScript로 이해하기&lt;/a&gt;를 다시 쓴 글입니다. (역주: Qiita에서는 스톡이라는 기능이 있어, 좋아하는 글을 담아두고 볼 수 있도록 제공하고 있습니다.)&lt;/p&gt;

&lt;p&gt;지금 다시 되돌아보면, 지난 글에는 몇가지 문제점이 있었습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;State와 Reducer에 Promise를 넣는건 좋지 못했던 것 같습니다.&lt;/li&gt;
  &lt;li&gt;Action의 dispatch 순서를 무시하고, 비동기 처리가 끝난 순서대로 처리가 흐르는 구조로 되어있었다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1번에 관해서는 처음에는 문제가 없다고 생각했었지만, 점점 시간이 흘러 그 생각은 젊은 치기였던 것 같다고 생각하게 되었습니다. 2번은 요구사항에 따라선 그것대로 괜찮다고 생각되지만, 그래도 기본적으로 dispatch 순서대로 처리하는 것이 더 올바른 동작이라고 생각하게 되었습니다.&lt;/p&gt;

&lt;p&gt;“RxJS로 Redux를 쓰자”라는 테마는 이번에 글을 다시 쓰면서 이제서야 본질에 접근할 수 있었다고 생각합니다.&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;여기서부터 본편&lt;/h2&gt;

&lt;p&gt;GitHub 리포지터리는 여기에 있습니다. &lt;a href=&quot;https://github.com/ovrmrw/understanding-redux-with-rxjs-2&quot;&gt;ovrmrw/understanding-redux-with-rxjs-2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt;한 뒤, &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt;해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt;를 통해 실행해볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;(주의사항: React에 관한 이야기는 일절 나오지 않습니다.)&lt;/p&gt;

&lt;h2 id=&quot;redux&quot;&gt;Redux는?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://redux.js.org/&quot;&gt;Redux 공식 홈페이지&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;전체 애플리케이션의 상태(State)를 하나의 JSON 트리 구조로 가지게 되어, Action이 발생할 때마다 트리를 전체적으로 업데이트해서 전달한다는 개념. 필자는 처음에 Flux나 Redux에 대해서 잘 몰랐지만, 다양한 것들을 참고하면서 직접 쓰면서 겨우 이해할 수 있었습니다.&lt;/p&gt;

&lt;p&gt;Middleware라는 개념은 잘 몰랐었고, 지금도 잘 모릅니다. 로거같은 편리한 것도 있습니다만, 원래 Redux를 그대로 사용해본 적이 없습니다. 치명적인 문제로 Redux는 Reducer의 안에서 비동기 처리를 할 수 없기 때문에, 그것을 처리하기 위한 미들웨어 전쟁이 일어나고 있는 것이 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;redux-&quot;&gt;Redux를 이해하기&lt;/h2&gt;

&lt;p&gt;“그러나 Angular 파인 우리들은 원래부터 RxJS가 있었다! 그래서 RxJS를 풀로 써서 Redux같은걸 만들어서 쓰자!”같은 말도 나왔습니다. 원래 글은 여기에 있습니다. &lt;a href=&quot;https://vsavkin.com/managing-state-in-angular-2-applications-caf78d123d02#.7zwj38sy1&quot;&gt;“Tackling State” by Victor Savkin&lt;/a&gt; (Victor Savkin은 Angular 팀의 핵심 멤버입니다. 그의 블로그는 구독할만한 가치가 있다고 생각합니다.)&lt;/p&gt;

&lt;p&gt;에서, 당시 RxJS에 대한 지식이 얕았었다. (JS에 대한 이해도 부족했었다.) 그래서 나는 이것을 이해하는데 매우 오랜 시간이 걸렸습니다. Savkin류 Redux를 나름대로 몇번이나 고쳐쓰는 것을 반복해서, 마침내 지금까지 오게 되었습니다. 사실은 하나의 간단한 짧은 코드로 모든 것을 설명할 수 있다는 것을 알 수 있었습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://qiita-image-store.s3.amazonaws.com/0/74793/6c582eff-0424-3f65-c421-8dcbc931db4d.jpeg&quot;&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/74793/6c582eff-0424-3f65-c421-8dcbc931db4d.jpeg&quot; alt=&quot;687474703a2f2f692e696d6775722e636f6d2f4149696d5138432e6a7067.jpeg&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;{ % highlight javascript % }
import ‘core-js’;
import ‘zone.js/dist/zone-node’;
import * as lodash from ‘lodash’;
import { Observable, Subject, BehaviorSubject } from ‘rxjs’;
declare const Zone: any;&lt;/p&gt;

&lt;p&gt;///////////////////////////////// Action
class IncrementAction {
  constructor(public num: number) { }
}&lt;/p&gt;

&lt;p&gt;class OtherAction {
  constructor() { }
}&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;type Action = IncrementAction&lt;/td&gt;
      &lt;td&gt;OtherAction;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;///////////////////////////////// State
interface IncrementState {
  counter: number;
}&lt;/p&gt;

&lt;p&gt;interface OtherState {
  foo: string;
  bar: number;
}&lt;/p&gt;

&lt;p&gt;interface AppState {
  increment: IncrementState;
  other?: OtherState;
}&lt;/p&gt;

&lt;p&gt;const initialState: AppState = {
  increment: {
    counter: 0
  }
};&lt;/p&gt;

&lt;p&gt;///////////////////////////////// Redux
Zone.current.fork({ name: ‘myZone’ }).runGuarded(() =&amp;gt; {&lt;/p&gt;

&lt;p&gt;console.log(‘zone name:’, Zone.current.name); /* OUTPUT&amp;gt; zone name: myZone */&lt;/p&gt;

&lt;p&gt;const dispatcher$ = new Subject&amp;lt;Action | Promise&lt;Action&gt; | Observable&lt;Action&gt;&amp;gt;(); // Dispatcher
  const provider$ = new BehaviorSubject&lt;AppState&gt;(initialState); // Provider&lt;/AppState&gt;&lt;/Action&gt;&lt;/Action&gt;&lt;/p&gt;

&lt;p&gt;const dispatcherQueue$ = // Queue
    dispatcher$
      .concatMap(action =&amp;gt; { // async actions are resolved here.
        if (action instanceof Promise || action instanceof Observable) {
          return Observable.from(action);
        } else {
          return Observable.of(action);
        }
      })
      .share();&lt;/p&gt;

&lt;p&gt;Observable // ReducerContainer
    .zip(…[
      dispatcherQueue$.scan((state, action) =&amp;gt; { // Reducer
        if (action instanceof IncrementAction) {
          return { counter: state.counter + action.num };
        } else {
          return state;
        }
      }, initialState.increment),&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  (increment): AppState =&amp;gt; { // projection
    return Object.assign&amp;lt;{}, AppState, {}&amp;gt;({}, initialState, { increment }); // always create new state object!
  }
])
.subscribe(newState =&amp;gt; {
  provider$.next(newState);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;provider$
    .map(appState =&amp;gt; appState.increment)
    .distinctUntilChanged((oldValue, newValue) =&amp;gt; lodash.isEqual(oldValue, newValue)) // restrict same values to pass through.
    .subscribe(state =&amp;gt; {
      console.log(‘counter:’, state.counter); /* (First time) OUTPUT&amp;gt; counter: 0 */
    });&lt;/p&gt;

&lt;p&gt;/* 
    OUTPUT: 0 -&amp;gt; 1 -&amp;gt; 2 -&amp;gt; 4 -&amp;gt; 3 
    outputs are not determined by async resolution order but by action dispatched order.
  &lt;em&gt;/
  dispatcher$.next(promiseAction(new IncrementAction(1), 100));  /&lt;/em&gt; OUTPUT&amp;gt; counter: 1 &lt;em&gt;/
  dispatcher$.next(promiseAction(new IncrementAction(1), 50));  /&lt;/em&gt; OUTPUT&amp;gt; counter: 2 &lt;em&gt;/
  dispatcher$.next(observableAction(new IncrementAction(0), 100));  /&lt;/em&gt; OUTPUT&amp;gt; (restricted) &lt;em&gt;/
  dispatcher$.next(observableAction(new IncrementAction(2), 50));  /&lt;/em&gt; OUTPUT&amp;gt; counter: 4 &lt;em&gt;/
  dispatcher$.next(new IncrementAction(-1)); /&lt;/em&gt; OUTPUT&amp;gt; counter: 3 */
});&lt;/p&gt;

&lt;p&gt;///////////////////////////////// Helper
function promiseAction(action: Action, timeout: number): Promise&lt;Action&gt; {
  return new Promise&lt;Action&gt;(resolve =&amp;gt; {
    setTimeout(() =&amp;gt; resolve(action), timeout);
  });
}&lt;/Action&gt;&lt;/Action&gt;&lt;/p&gt;

&lt;p&gt;function observableAction(action: Action, timeout: number): Observable&lt;Action&gt; {
  return Observable.of(action).delay(timeout);
}
{ % endhighlight % }&lt;/Action&gt;&lt;/p&gt;

&lt;p&gt;어떤가요, 초간단하죠?&lt;/p&gt;

&lt;p&gt;덧붙여서 이번 코드는 &lt;a href=&quot;https://github.com/angular/zone.js/&quot;&gt;zone.js&lt;/a&gt;을 사용할 필요는 없습니다만, 추후 Angular에서 돌아갈 코드는 가능한 Node.js 환경에서도 Zone을 이용하여 쓰는 것이 좋습니다. 그렇지 않으면 Node.js 환경에서 동작하는 코드가 Angular에서 동작하지 않는다던가 하는 일이 발생할 수 있기 때문입니다. (전 그저 Angular를 좋아할 뿐입니다.)&lt;/p&gt;

&lt;h2 id=&quot;subject&quot;&gt;요점 1. Subject&lt;/h2&gt;

&lt;p&gt;{ % highlight javascript % }
  dispatcher$.next(promiseAction(new IncrementAction(1), 100));
{ % endhighlight % }&lt;/p&gt;

&lt;p&gt;이것이 Action의 시작점입니다. 덧붙여서 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatcher$&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Subject&lt;/code&gt;의 인스턴스입니다. 이 다음에 스트림이 어디로 흐를까요? 정답은 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatcherQueue$&lt;/code&gt;입니다.&lt;/p&gt;

&lt;h2 id=&quot;concatmap&quot;&gt;요점 2. concatMap&lt;/h2&gt;

&lt;p&gt;{ % highlight javascript % }
  const dispatcherQueue$ = // Queue
    dispatcher$
      .concatMap(action =&amp;gt; { // async actions are resolved here.
        if (action instanceof Promise || action instanceof Observable) {
          return Observable.from(action);
        } else {
          return Observable.of(action);
        }
      })
      .share();
{ % endhighlight % }&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatcher$&lt;/code&gt;로 부터 흘러들어온 Action을 &lt;code class=&quot;highlighter-rouge&quot;&gt;concatMap&lt;/code&gt; 오퍼레이터로 받고 있습니다. 무엇을 하고 있냐면…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Promise 혹은 Observable, 즉 비동기라면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Obervable.from()&lt;/code&gt;로 비동기를 해결해서 돌려줍니다.&lt;/li&gt;
  &lt;li&gt;그 외, 동기식이라면 &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable.of()&lt;/code&gt;로 단순히 Observable로 변환해줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이것을 통해 &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable | Observable&amp;gt;&lt;/code&gt;이었던 Action의 타입은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&lt;/code&gt;로 통일됩니다.&lt;/p&gt;

&lt;p&gt;게다가 &lt;code class=&quot;highlighter-rouge&quot;&gt;concatMap&lt;/code&gt;의 효과에 의해 Action의 dispatch 순서를 준수합니다. 멋지네요. 이 Reducer의 앞에서 비동기를 해결하자는 어프로치는 redux-observable에서도 통하는 부분이 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://reactivex.io/documentation/operators/images/concatMap.png&quot;&gt;&lt;img src=&quot;http://reactivex.io/documentation/operators/images/concatMap.png&quot; alt=&quot;img&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;behaviorsubject&quot;&gt;요점 3. BehaviorSubject&lt;/h2&gt;

&lt;p&gt;{ % highlight javascript % }
const provider$ = new BehaviorSubject&lt;AppState&gt;(initialState);
{ % endhighlight % }&lt;/AppState&gt;&lt;/p&gt;

&lt;p&gt;여기에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Subject&lt;/code&gt;로서가 아니라 &lt;code class=&quot;highlighter-rouge&quot;&gt;BehaviorSubject&lt;/code&gt;인게 의미가 있습니다. 만약 이를 Subject로 바꾼다면 처음 “counter: 0”이 출력되지 않습니다. 초기 값이 바로 전달되는 모습은 아래 마블 다이어그램에서 보면 알기 쉬울 것 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://reactivex.io/documentation/subject.html&quot;&gt;Subject의 문서&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://qiita-image-store.s3.amazonaws.com/0/74793/ddbaa374-6810-129b-5ba1-d1162bd6902d.png&quot;&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/74793/ddbaa374-6810-129b-5ba1-d1162bd6902d.png&quot; alt=&quot;S.BehaviorSubject.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;scan&quot;&gt;요점 4. scan&lt;/h2&gt;

&lt;p&gt;{ % highlight javascript % }
      dispatcherQueue$.scan((state, action) =&amp;gt; { // Reducer
        if (action instanceof IncrementAction) {
          return { counter: state.counter + action.num };
        } else {
          return state;
        }
      }, initialState.increment)
{ % endhighlight % }&lt;/p&gt;

&lt;p&gt;이 부분이 바로 Reducer입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;scan&lt;/code&gt; 오퍼레이터는 Store(Reducer)를 구축하게 됩니다. 이것은 시간과 만나는 reduce라고 이해하면 그걸로 충분할거라 생각합니다. 이 &lt;code class=&quot;highlighter-rouge&quot;&gt;scan&lt;/code&gt;과 아래의 &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt;을 제대로 이해할 수 있는가가 이 글을 이해했는가를 결정합니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://rxmarbles.com/#scan&quot;&gt;scan의 마블 다이어그램&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatcher$.scan()&lt;/code&gt; 대신, &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatcherQueue$.scan()&lt;/code&gt;인 것이 중요합니다.&lt;/p&gt;

&lt;h2 id=&quot;zip-projection&quot;&gt;요점 5. zip, projection&lt;/h2&gt;

&lt;p&gt;{ % highlight javascript % }
      (increment): AppState =&amp;gt; { // projection
        return Object.assign&amp;lt;{}, AppState, {}&amp;gt;({}, initialState, { increment });
      }
{ % endhighlight % }&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt; 오퍼레이터의 마지막 인자로 projection이라고 불리는 함수를 넣어 반환 값을 갖추고 있습니다. 참고로 &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt; 안이 여러 개 있을 때에는 다음과 같이 씁니다.&lt;/p&gt;

&lt;p&gt;{ % highlight javascript % }
    .zip&lt;AppState&gt;(...[
      dispatcher$.scan(/* 생략 */), // state1
      dispatcher$.scan(/* 생략 */), // state2
      dispatcher$.scan(/* 생략 */), // state3&lt;/AppState&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  (state1, state2, state3): AppState =&amp;gt; { // projection
    return Object.assign&amp;lt;{}, AppState, {}&amp;gt;({}, initialState, { state1, state2, state3 });
  }
]) { % endhighlight % }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://rxmarbles.com/#zip&quot;&gt;zip의 마블 다이어그램&lt;/a&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt;과 비슷한 &lt;code class=&quot;highlighter-rouge&quot;&gt;combineLatest&lt;/code&gt;라는 오퍼레이터가 있습니다만 &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt;은 내포하는 모든 Observable의 next를 기다리는 반면, &lt;code class=&quot;highlighter-rouge&quot;&gt;combineLatest&lt;/code&gt;는 한 Observable이 next할 때마다 각각의 Observable의 최신 값을 넘겨줍니다.&lt;/p&gt;

&lt;p&gt;이와 같은 이유로, Redux의 개념에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt;이 적합하다 할 수 있습니다.
&lt;a href=&quot;http://rxmarbles.com/#combineLatest&quot;&gt;combineLatest의 마블 다이어그램&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;distinctuntilchanged&quot;&gt;요점 6. distinctUntilChanged&lt;/h2&gt;

&lt;p&gt;{ % highlight javascript % }
    .distinctUntilChanged((oldValue, newValue) =&amp;gt; lodash.isEqual(oldValue, newValue))
{ % endhighlight % }&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;distinctUntilChanged&lt;/code&gt;오퍼레이터는 통과하는 스트림이 같은 값일 경우에는 없애주는 역할을 합니다. 하지만 이번 코드는 위의 Projection의 쪽에서,&lt;/p&gt;

&lt;p&gt;{ % highlight javascript % }
return Object.assign&amp;lt;{}, AppState, {}&amp;gt;({}, initialState, { increment });
{ % endhighlight % }&lt;/p&gt;

&lt;p&gt;이렇게 하고 있기 때문에, 단순히 &lt;code class=&quot;highlighter-rouge&quot;&gt;.distinctUntilChanged()&lt;/code&gt;라고 써버리면 흘러온 데이터가 &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;counter:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;→&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;counter:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;와 같이 같은 값이 계속 오더라도 모두 통과해버립니다. 이것은 객체의 내용을 보지 않기 때문입니다.&lt;/p&gt;

&lt;p&gt;객체의 내용을 확인하기 위해 소위 deepEqual 비교를 해야하기 때문에, comparer라고 불리는 함수를 아래와 같이 작성합니다.&lt;/p&gt;

&lt;p&gt;{ % highlight javascript % }
(oldValue, newValue) =&amp;gt; lodash.isEqual(oldValue, newValue)
{ % endhighlight % }&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://reactivex.io/documentation/operators/distinct.html&quot;&gt;distinctUntilChanged의 문서&lt;/a&gt;
&lt;a href=&quot;https://lodash.com/docs/#isEqual&quot;&gt;lodash.isEqual의 문서&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;angular--&quot;&gt;Angular에서 쓰기 위해선&lt;/h2&gt;

&lt;p&gt;Dispatcher를 DI 컨테이너에 넣어 Component에 주입하면 Component부터 Action을 날릴 수 있습니다. 또한 Provider 스트림의 마지막 부분을 어떻게 해서 Component에 주입하면 Component에서 갱신된 State를 얻을 수 있습니다.&lt;/p&gt;

&lt;p&gt;덧붙여서 &lt;a href=&quot;http://qiita.com/ovrmrw/items/27d06475f405fd4ca9b4&quot;&gt;Firebase-as-a-Store “RxJS로 만드는 Firebase 백엔드의 Redux”&lt;/a&gt;에서 소개하고 있는 Angular 애플리케이션은 이 개념을 고스란히 이용해 구축했습니다.&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;정리하기&lt;/h2&gt;

&lt;p&gt;요점은 여러 가지가 있지만 가장 중요한 것은 Reducer를 구성하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;scan&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt; 오퍼레이터 부분입니다. Reducer를 늘리고 싶다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;zip&lt;/code&gt; 오퍼레이터에 점점 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispatcherQueue$.scan&lt;/code&gt;을 추가해가면 됩니다. 해야할 일은 그것 뿐입니다.&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Jan 2017 12:00:00 +0900</pubDate>
        <link>http://realignist.me/code/2017/01/18/redux-with-typescript-rxjs.html</link>
        <guid isPermaLink="true">http://realignist.me/code/2017/01/18/redux-with-typescript-rxjs.html</guid>
        
        <category>featured</category>
        
        <category>development</category>
        
        <category>redux</category>
        
        <category>javascript</category>
        
        <category>rxjs</category>
        
        <category>angular</category>
        
        <category>typescript</category>
        
        
        <category>Code</category>
        
      </item>
    
      <item>
        <title>Vue.js를 쓸 때의 모범 사례에 대해서 생각해보다.</title>
        <description>&lt;h3 id=&quot;section&quot;&gt;글에 앞서,&lt;/h3&gt;

&lt;p&gt;이 글은 Qiita에 올라온 @EdwardKenFox님의 &lt;a href=&quot;http://qiita.com/edwardkenfox/items/6f4aa591485d2a270841&quot;&gt;글&lt;/a&gt;을 한국어로 번역한 글입니다. 개인적으로 Vue.js에 관심이 있어서 찾아보면서 좋은 글을 발견해서 번역해봤습니다. 혹시 번역에 이상하거나 모르는 부분이 있다면 댓글로 남겨주시면 감사하겠습니다. 흔쾌히 번역을 허락해주신 EdwardKenFox님께도 감사하다는 말씀 드립니다.&lt;/p&gt;

&lt;p&gt;Vue.js는 공식 문서가 매우 충실하고, 또 포럼에서의 토론이나 의사 소통 또한 매우 활발합니다. 개발 중에 무언가 문제가 발생했을 때에는 문서 혹은 포럼에 올라온 정보를 참고하면 많은 문제들을 해결할 수 있다고 해도 무방합니다. 하지만 실제 애플리케이션을 개발할 때에는 그러한 정보만으로 해결이 어려운 구체적인 문제들이나, 원래 어떻게 개발해야 좋을지 모르는 일이 생기는 경우도 많이 있습니다.&lt;/p&gt;

&lt;p&gt;필자 자신이 Vue.js를 이용해서 프론트엔드 개발을 해온 경험과 더불어, Vue.js의 공식 문서와 샘플 프로젝트, 그리고 Vue.js의 플러그인 등의 소스를 읽고 축적한 노하우들을 문서로 정리했습니다.&lt;/p&gt;

&lt;p&gt;“모범 사례”라고 이름을 붙이고는 있지만, 필자의 취향과 개발 경험에 의존하는 부분이 크겠죠. 본 자료를 보다 의미있게 만들기 위해 Vue.js를 이용해서 개발을 할 때의 노하우와 사례를 가지고 계신 분들은 꼭 댓글이나 편집 요청(역주: Qiita에는 편집 요청을 통해 다른 사용자가 글에 수정 요청을 할 수 있습니다.)을 통해 가르쳐주세요!&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;버전&lt;/h2&gt;

&lt;p&gt;당연한 이야기이지만, 새로 개발을 시작하는 프로젝트라면 Vue.js의 최신 버전을 쓴다고 해서 문제가 될 것이 없습니다. 2016년 12월 18일 기준으로는 &lt;a href=&quot;https://github.com/vuejs/vue/tree/v2.1.6&quot;&gt;v2.1.6&lt;/a&gt;이 최신 버전입니다.&lt;/p&gt;

&lt;p&gt;또한 1.x 버전을 이용하고 있는 프로젝트는 2.x로 업그레이드하는 것을 추천합니다. 완전히 새로워진 부분도 있기 때문에 1.x에서 2.x로의 마이그레이션이 쉽지 않을 수도 있지만, 그래도 많은 혜택을 누릴 수 있을 것입니다. 1.x에서 2.x로 마이그레이션하는데 사용할 수 있는 도구가 있고, deprecated된 API에 대한 안내와 가이드도 잘 쓰여 있기 때문에 참고하시면 도움이 될 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;vue-migration-helper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://vuejs.org/v2/guide/migration.html&quot;&gt;Migration from Vue 1.x&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;패키지 관리 도구&lt;/h2&gt;

&lt;p&gt;Vue 플러그인의 리포지터리를 다양하게 찾아보면 보통은 npm 패키지의 관리를 위해 npm을 이용하는 곳이 대부분이었습니다. 개발이 활발한 일부 저장소의 경우는 yarn을 이용하는 곳도 있었습니다만 그 수는 많지 않았던 것 같습니다.&lt;/p&gt;

&lt;p&gt;하지만 npm에 비해 yarn은 의존하는 라이브러리가 많을수록 설치가 빠르다는 벤치마크 결과도 나와 있어 새 프로젝트에서 yarn을 쓰지 않을 이유는 없을지도 모릅니다. CI 등으로 yarn을 사용할 때는 캐시 설정 등을 조심해서 사용할 필요가 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/pine613/yarn-vs-npm-at-2-vs-npm-at-3&quot;&gt;yarn vs npm@2 vs npm@3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-3&quot;&gt;빌드 도구&lt;/h2&gt;

&lt;p&gt;Vue.js 공식에서 제공하고 있는 vuejs-templates에는 webpack과 browserify를 위한 샘플 설정 파일과 구현이 있습니다. 각 저장소의 스타 수를 보면 webpack쪽이 압도적으로 인기인 것 같네요. Vue.js 라이브러리 등을 봐도 webpack을 사용하고 있는 곳이 대부분이며, 어셋 등을 쉽게 관리할 수 있는 기능이 있는 webpack을 사용하는 것을 권장합니다.&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;기법&lt;/h2&gt;

&lt;p&gt;v-on과 v-bind를 이용할 때는 역시 간결한 단축법을 선호하는 것 같습니다. 또한 여러 사람이 개발하는 프로젝트라면 ESLint과 &lt;code class=&quot;highlighter-rouge&quot;&gt;.editorconfig &lt;/code&gt; 등을 이용하여 문법과 구문을 통일하는게 일반적입니다.&lt;/p&gt;

&lt;h2 id=&quot;props--&quot;&gt;Props의 타입 체크&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;를 통해 들어오는 값의 타입 체크는 가능한 사용하는 것이 좋겠죠. 예를 들어 양의 정수를 기대하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;일 때에는 Number 형인지 검사하는 것과 함께 음수가 아닌지 validate해준다면 알아채기 어려운 버그를 줄이는데 큰 도움이 됩니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// not so good&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'child'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'age'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;// good&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'child'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;// better&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'child'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;의 타입 체크에는 여러가지 형태를 지정하거나 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;로 지정하여 모든 형태를 허용할 수 있습니다만, 이처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;로 지정하는 것은 지양하는 것을 추천합니다. 아무래도 &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;을 지정하는 경우에는 하나의 형식의 값을 전달할 수 있도록 컴포넌트나 &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;로 넘기는 방식으로 데이터의 구조를 다시 검토해보는 것이 좋을 것 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://vuejs.org/v2/guide/components.html#Prop-Validation&quot;&gt;Prop Validation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-5&quot;&gt;라이프사이클 훅의 활용&lt;/h2&gt;

&lt;p&gt;Vue.js에는 편리한 API가 많이 준비되어 있습니다만, 이벤트 계열의 메소드나 세세한 컴포넌트 옵션을 구사하기 전에 구현하려고 하는 처리나 행위가 라이프사이클 훅을 잘 활용해서 돌아가는지 점검해볼 필요가 있습니다. 필자의 경험으로는 컴포넌트가 생각했던대로 동작하지 않을 경우 라이프사이클 훅의 사용이 잘못됬었던 경우가 많았습니다. 그럴 경우 자칫 &lt;code class=&quot;highlighter-rouge&quot;&gt;watch&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;$emit&lt;/code&gt;을 필요 이상으로 복잡하게 남용하고 있었던 것입니다. 라이프사이클 훅을 잘 맞춰야 심플하고 자연스럽게 동작합니다.&lt;/p&gt;

&lt;p&gt;컴포넌트가 단독으로 존재하고 있는 등의 미니멀한 상황에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;created&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;mounted&lt;/code&gt; 같은 라이프사이클을 이용해도 그다지 큰 차이는 없을지도 모릅니다. 하지만 컴포넌트들이 &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt; 등을 통해 서로 맞물려서 동작하는 경우는 부모 컴포넌트의 &lt;code class=&quot;highlighter-rouge&quot;&gt;created&lt;/code&gt;와 자식 컴포넌트의 &lt;code class=&quot;highlighter-rouge&quot;&gt;mounted&lt;/code&gt; 등의 타이밍 차이를 잘 이해하고 컴포넌트를 작성할 필요가 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mounted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello from parent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; &quot;Hello from parent&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'child'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mounted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello from child&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mounted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello from parent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; &quot;Hello from child&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; &quot;Hello from parent&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'child'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mounted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello from child&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Hello from parent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; &quot;Hello from parent&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// =&amp;gt; &quot;Hello from child&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;v-for---&quot;&gt;v-for로 표시된 컴포넌트의 제거&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v-for&lt;/code&gt;로 렌더링된 아이템의 리스트 중에서 사용자의 조작에 의해 특정 컴포넌트를 제거하는 일은 자주 있다고 생각합니다. 이를 구현하는 방법은 다양할 것이라 생각하지만, 대부분 아래의 두가지 방법인 것 같습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;삭제 대상의 컴포넌트(하위 컴포넌트)가 자신의 삭제를 부모 컴포넌트에게 이양하는 패턴 (삭제를 이벤트로 해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;$emit&lt;/code&gt;하고 실제 삭제 처리는 부모 컴포넌트가 하거나, store에 커밋한다.)&lt;/li&gt;
  &lt;li&gt;부모 컴포넌트의 함수로 삭제 처리를 구현하고 삭제 함수를 자식 컴포넌트에 &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;로 전달합니다. 실제로 삭제할 때 자식 컴포넌트가 받고 있는 함수를 실행해서 컴포넌트 자신을 제거합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;필자 개인적으로는 어떤 방법이 다른 쪽에 비해 특히 우수하다고는 생각하지 않습니다만, UI나 컴포넌트의 분할 단위 관점에서 처리 흐름이 보다 자연스러운 쪽을 선택하는 것이 좋다고 생각합니다. 또한 자식 컴포넌트의 제거 이외에 추가 처리가 이것저것 부수적으로 있을 때에는 두 번째 방법이 더 다루기 쉬울지도 모릅니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 패턴 1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'child'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;removeItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$parent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'removeItem'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 패턴 2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'child'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;removeItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-6&quot;&gt;외부 라이브러리의 컴포넌트화&lt;/h2&gt;

&lt;p&gt;서드 파티 라이브러리, 특히 UI와 관련한 라이브러리의 경우는 Vue 인스턴스 안에서 직접 라이브러리를 사용하는 것이 아니라 Vue의 컴포넌트로 감싸는 것을 고려해보세요. 다른 컴포넌트에서도 Vue의 API를 통해 동작할 수 있게끔 서드 파티 라이브러리의 API에 관심을 기울일 필요가 있습니다.&lt;/p&gt;

&lt;p&gt;또 범용적으로 쓰고 싶은 UI의 효과(애니메이션이나 전환 효과같은…) 등은 컴포넌트와 디렉티브를 모두 준비해야한다고 생각합니다. 이렇게 하면 이 효과를 이용하는 다른 컴포넌트의 사정에 맞춰 컴포넌트로 이용하거나, 디렉티브를 통해 이용할지 선택할 수가 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://vuejs.org/v2/examples/select2.html&quot;&gt;Wrapper Component&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/surmon-china/vue-touch-ripple&quot;&gt;vue-touch-ripple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-7&quot;&gt;비동기 통신 라이브러리&lt;/h2&gt;

&lt;p&gt;얼마 전 &lt;a href=&quot;https://github.com/pagekit/vue-resource&quot;&gt;vue-resource&lt;/a&gt;가 Vue.js의 공식 비동기 통신 라이브러리였지만, 현재 Vue.js가 공식으로 제공하는 비동기 통신 라이브러리는 없습니다. 원래 Vue.js는 외부 라이브러리를 통합하기 쉽도록 되어있어 평소 사용하던 익숙한 비동기 통신 라이브러리를 사용하는 것이 좋습니다.&lt;/p&gt;

&lt;p&gt;공식에서 벗어나긴 했지만, vue-resource를 이용하고 있는 프로젝트도 많은 것 같습니다. Javascript 전체의 상황을 보면 &lt;a href=&quot;https://github.com/mzabriskie/axios&quot;&gt;axios&lt;/a&gt;나 &lt;a href=&quot;https://github.com/request/request&quot;&gt;request&lt;/a&gt; 등이 인기인 것 같습니다. 또한 브라우저의 fetch API를 이용하는 것도 괜찮겠죠. (Safari에서는 아직 네이티브로 구현되어있지 않기 때문에 &lt;a href=&quot;https://github.com/github/fetch&quot;&gt;polyfill&lt;/a&gt;의 사용이 필요합니다.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/the-vue-point/retiring-vue-resource-871a82880af4#.phooxp2li&quot;&gt;Retiring vue-resource&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;flux--&quot;&gt;Flux 아키텍쳐의 도입&lt;/h2&gt;

&lt;p&gt;작년 경부터 Flux 아키텍쳐가 프론트엔드에 새로운 바람을 가져다주고, Vue.js 세계에도 &lt;a href=&quot;https://github.com/vuejs/vuex&quot;&gt;Vuex&lt;/a&gt;라고 하는 Flux-like한 라이브러리가 공식적으로 제공되고 있습니다. Vuex 자체는 매우 잘 만들어진 라이브러리지만, 애플리케이션의 규모나 복잡도와 잘 부합하는지를 검토해봐야한다고 필자는 생각합니다.&lt;/p&gt;

&lt;p&gt;필자 개인적인 감상으로는 중소 규모의 애플리케이션이라면 Vuex를 도입하는 것보다 전에 Vue.js 공식 문서에 적혀있었던 &lt;a href=&quot;https://vuejs.org/v2/guide/state-management.html&quot;&gt;store 패턴을 도입&lt;/a&gt;해서 상태를 관리하는 것이 더 낫다고 생각합니다. Vuex는 상태 관리와 업데이트에 질서를 가져다주지만, 도중에 도입해버리면 오히려 일관성을 잃거나 불필요한 오버 엔지니어링을 낳을 우려도 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/advent-calendar/2016/vue&quot;&gt;Vue.js 대림절 달력 2016&lt;/a&gt;에도 있듯 &lt;a href=&quot;http://qiita.com/nekobato&quot;&gt;@nekobato&lt;/a&gt;님의 &lt;a href=&quot;http://qiita.com/nekobato/items/44a7027504a2c65ce664&quot;&gt;“구조의 복잡성와 Vuex 헤쳐보기”&lt;/a&gt;가 매우 도움이 되기 때문에 흥미가 있는 분들은 그쪽을 참고하시면 도움이 될 것입니다.&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;싱글 파일 컴포넌트&lt;/h2&gt;

&lt;p&gt;빌드 환경 및 프로젝트 개발 환경에 크게 의존하고 있지만, 싱글 파일 컴포넌트(.vue 파일)을 이용할 수 있는 경우는 적극적으로 활용하는 것이 좋습니다. 컴포넌트는 사용자 인터페이스의 ‘외형’과 ‘행동’을 바탕으로 분할한 부품의 단위이며 템플릿(HTML), 외관(CSS), 그리고 동작(Javascript)를 하나의 파일로 끝내는데에는 의미가 있다고 생각합니다. 프론트엔드 개발자와 디자이너가 협동하는 경우에도 싱글 파일 컴포넌트는 통일적인 작업 환경을 만들어주기 때문에, 효율적으로 협어하는데 도움이 될 것으로 기대하고 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;section-9&quot;&gt;컴포넌트의 재활용&lt;/h2&gt;

&lt;p&gt;“싱글 파일 컴포넌트”에서도 쓴 것처럼 컴포넌트는 극단적으로 말하면 UI를 분할한 부품이며, UI의 부품은 그것이 속한 페이지의 문맥화에 있습니다. 비슷하게 보이는 UI도 실은 행동이 다르거나 하는 엣지 케이스를 가지는 경우는 적지 않습니다.&lt;/p&gt;

&lt;p&gt;이러한 “보기처럼 보이고 실제로는 다른” 부품을 공통의 컴포넌트로 구현해버리면 인수나 &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;에 의한 제어 뿐만 아니라 컴포넌트의 조건 분기가 증가할 수 밖에 없습니다. 이것은 일반적인 컴포넌트를 이용할 때도 큰 부담을 주기도 하며, 버그의 온상이 될 수도 있습니다.&lt;/p&gt;

&lt;p&gt;이러한 상황은 UI 디자인을 검토하는 좋은 타이밍에 포착할 수도 있지만, 어쨋든 무리한 공통화와 범용화는 좋은 결과를 가져오지 않는다는 것을 강조하고 싶습니다. 다른 컴포넌트에서 공통 부분을 찾아서 공통화하는 것보다, 한번 공통화된 것을 분리하는 것이 더 어렵습니다. 브라우저의 성능도 나날이 향상하고 대부분의 클라이언트는 빠른 네트워크에서 웹 애플리케이션을 사용합니다. 약간 파일 크기가 커진다고 해도, 무리한 일반화는 삼가하고 코드 베이스를 취급하기 쉬운 형태로 유지하는 것이 더 이점이 크지 않을까요?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://vuejs.org/v2/guide/components.html#Authoring-Reusable-Components&quot;&gt;Authoring Reusable Components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-10&quot;&gt;테스트&lt;/h2&gt;

&lt;p&gt;Vue.js 대림절 달력 2016에서도 일부 테스트와 관련된 글이 올라왔습니다만, 프론트엔드 개발이 계속 복잡해지고 있는 요즘 Vue.js를 이용한 컴포넌트 유닛 테스트를 작성할 필요성은 점점 높아지고 있다고 생각합니다.&lt;/p&gt;

&lt;p&gt;그 컴포넌트의 구현을 본 것만으로 컴포넌트의 움직임이나 처리를 모두 이해할 수 있는 컴포넌트라면 일부러 테스트를 할 필요는 없겠죠. 하지만 컴포넌트 간에 &lt;code class=&quot;highlighter-rouge&quot;&gt;props&lt;/code&gt;가 전달되고, 그것을 바탕으로 컴포넌트의 동작이 바뀌는 경우에는 해당 컴포넌트의 동작이 명시된 테스트 코드가 있으면 안심입니다. 또한 필자 자신은 컴포넌트에서 비동기 통신을 진행하고 응답 내용에 따라 Vue 인스턴스에 값을 설정하는 것 같은 행동을 하는 컴포넌트가 있을 때도 유닛 테스트를 작성하도록 하고 있습니다. 이렇게 테스트를 작성하는 코스트와 테스트를 통해 얻는 안정성(이익)을 헤아리는 것은 어렵지만, 역시 테스트가 있으면 리팩토링을 할 때 안정적으로 진행할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://vuejs.org/v2/guide/unit-testing.html&quot;&gt;Unit Testing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/potato4d/items/8215941b84c11b845886&quot;&gt;Vue.js Vue 컴포넌트의 유닛 테스트를 작성해보자&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/hypermkt/items/e9f34a89221c50de2094&quot;&gt;axios을 이용한 Vue component의 UnitTest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-11&quot;&gt;정리하며&lt;/h2&gt;

&lt;p&gt;Vue.js에 한정하지 않고 어떤 프레임워크도 프레임워크의 특성과 습관을 이해하고 활용하는 것이 중요하다는 것은 의심할 여지가 없습니다. 또한 개발된 애플리케이션도 다양하고, 개발자는 요구사항에 부합하는 설계를 하고 적당한 라이브러리를 쓰는 것이 필요합니다. 이 문서가 Vue.js를 이용하여 프론트엔드 개발을 하고 있는 사람과 앞으로 프론트엔드 개발을 하려는 사람에게 도움이 된다면 기쁠 것 같습니다&lt;/p&gt;
</description>
        <pubDate>Tue, 17 Jan 2017 12:00:00 +0900</pubDate>
        <link>http://realignist.me/code/2017/01/17/vue-js-best-practice.html</link>
        <guid isPermaLink="true">http://realignist.me/code/2017/01/17/vue-js-best-practice.html</guid>
        
        <category>featured</category>
        
        <category>development</category>
        
        <category>vue</category>
        
        <category>vuejs</category>
        
        <category>jsx</category>
        
        <category>javascript</category>
        
        
        <category>Code</category>
        
      </item>
    
      <item>
        <title>지킬 블로그에 AMP를 적용해보자</title>
        <description>&lt;p&gt;항상 그렇지만 사람이 백수가 되면 심심해지고, 사람이 잉여로워지면 무언가 재미난 것을 하게 된다. 오늘은 지킬 블로그에 AMP(Accelerated Mobile Pages) 페이지를 넣은 후기를 쓰려고 한다. 이 글은 AMP가 무엇인지 아는 사람을 위해 작성된 글로, AMP에 대한 설명과 소개는 &lt;a href=&quot;https://www.ampproject.org/ko/learn/about-amp/&quot;&gt;여기&lt;/a&gt;에서 볼 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;travis&quot;&gt;천리길도 Travis부터.&lt;/h3&gt;

&lt;p&gt;사실 지금 보고 있는 이 웹 페이지는 GitHub Pages에서 돌아가고 있다. GitHub Pages는 기본적으로 Jekyll을 지원하기 때문에 소스 코드만 GitHub에 올리면, 알아서 웹에서 생성된 html 파일을 볼 수 있다. 하지만 GitHub Pages는 외부 플러그인을 지원하지 않는 안전 모드로 동작하기 때문에, 나는 AMP를 적용하기 위해 html만이 있는 브랜치와 소스 코드가 있는 브랜치를 분리하게 되었다.&lt;/p&gt;

&lt;p&gt;item4님도 Travis로 블로그를 설정하셨길래 어떻게 셋팅했나 보니까 Lektor는 손쉽게 GitHub로 생성된 html만을 Deploy할 수 있었다. 아…! 셋팅하기 너무 귀찮았지만, 백수니까 그냥 셋팅했다. 내 빌드 스크립트는 &lt;a href=&quot;https://github.com/Hazealign/hazealign.github.io/blob/src/scripts/deploy.sh&quot;&gt;여기&lt;/a&gt;에서 볼 수 있다. (블로그 커밋 로그가 엉망이니까 로그는 보지 않는걸 권장한다…)&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;참고했었던 스크립트들이다.&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/domenic/ec8b0fc8ab45f39403dd&quot;&gt;처음에 뼈대로 쓴 것&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://eshepelyuk.github.io/2014/10/28/automate-github-pages-travisci.html&quot;&gt;그 이후에 참고한 것 &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아, 기분 좋게 Travis가 연동됬다. 이제 Jekyll에 플러그인을 이것저것 넣을 수도 있으니 AMP 플러그인을 넣어보기로 한다.&lt;/p&gt;

&lt;h3 id=&quot;amp-jekyll-amplify&quot;&gt;amp-jekyll과 amplify&lt;/h3&gt;

&lt;p&gt;amp-jekyll과 amplify를 소개하기 전에 우선 고백한다. 내 블로그는 끄-음찍한 혼종이다. 상단 부분의 헤더는 amplify를 참고했고, 기본적으로 amp html을 생성하는 것은 amp-jekyll을 이용하고 있다. 내가 웹을 제대로 개발하는 사람은 아니기 때문에 내 블로그는 그만 알아보자…&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/juusaw/amp-jekyll&quot;&gt;amp-jekyll&lt;/a&gt;은 jekyll 플러그인 형태로 amp html을 생성시키는 프로젝트다. 또 &lt;a href=&quot;https://github.com/ageitgey/amplify&quot;&gt;amplify&lt;/a&gt;는 amp html을 만들어내는 하나의 jekyll 테마이다. 나는 이미 만들어두고 쓰고 있는 베이스 jekyll 테마가 있었기 때문에 amp html에서만 amplify를 살짝 참고하고, amp html 베이스는 amp-jekyll로 만들었다. amp-jekyll을 약간 수정했는데 내 프로젝트의 &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; 구조에 맞게 바꾼 것과 &lt;a href=&quot;https://github.com/juusaw/amp-jekyll/pull/14/files&quot;&gt;Pull Request 하나&lt;/a&gt;를 체리픽한게 끝이다.&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;하면서 디버깅은 어떻게 했는가.&lt;/h3&gt;

&lt;p&gt;다른 amp html을 개발할 때랑 똑같이 amp 페이지 url 뒤에 &lt;code class=&quot;highlighter-rouge&quot;&gt;#development=1&lt;/code&gt;를 넣어주면 된다. 매우 심플하다. 그러면 amp validation이 동작할 것이다.&lt;/p&gt;

&lt;p&gt;또, 중간에 &lt;a href=&quot;https://github.com/juusaw/amp-jekyll/pull/11&quot;&gt;이 PR&lt;/a&gt;을 체리픽 했었는데 문제가 있었다. &lt;code class=&quot;highlighter-rouge&quot;&gt;amp-img&lt;/code&gt; 태그에는 기본적으로 이미지의 width와 height가 명시되어야하기 때문에 fastimage라는 모듈을 써서 이미지의 원본 사이즈를 가져오는데, 여기가 제대로 동작하지 않았었다. 한가지 더, amp html은 url 맨 끝에 &lt;code class=&quot;highlighter-rouge&quot;&gt;.html&lt;/code&gt; 확장자를 붙으면 에러가 난다. 참고하자.&lt;/p&gt;

&lt;h3 id=&quot;amp---&quot;&gt;그래서 내 AMP 페이지는 어떻게 보일까?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20161201_1.png&quot; alt=&quot;스크린샷&quot; /&gt;&lt;/p&gt;

&lt;p&gt;대충 이렇게 보인다. 디자인적으로는 아쉽긴 하지만, 모바일에서 검색했을 때 빨리 보인다는 메리트 때문에 AMP를 쓰는거라서 크게 거슬리거나 하지는 않았다. 이제 구글 검색이 AMP 검색 결과를 보여주길 기다리면… 될 것 같다. :D&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Dec 2016 18:00:00 +0900</pubDate>
        <link>http://realignist.me/code/2016/12/01/amp-my-jekyll-web.html</link>
        <guid isPermaLink="true">http://realignist.me/code/2016/12/01/amp-my-jekyll-web.html</guid>
        
        <category>development</category>
        
        <category>amphtml</category>
        
        <category>amp</category>
        
        <category>jekyll</category>
        
        <category>amp-jekyll</category>
        
        <category>amplify</category>
        
        
        <category>Code</category>
        
      </item>
    
      <item>
        <title>macOS 기준 Rust에서 OpenSSL과 관련된 빌드 오류 해결하기</title>
        <description>&lt;p&gt;Rust로 OpenSSL과 연결된 것들을 빌드할 때, 간혹 다음과 같은 에러를 볼 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;--- stderr
&lt;/span&gt;/…/openssl-sys-0.6.4/src/openssl_shim.c:1:10: fatal error: 'openssl/hmac.h' file not found
#include &amp;lt;openssl/hmac.h&amp;gt;
         ^
1 error generated.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이럴 때는 다음과 같이 해결할 수 있습니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew install openssl

 &lt;span class=&quot;c&quot;&gt;# 다음 내용을 환경 변수로 추가해주세요.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPENSSL_INCLUDE_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;brew --prefix openssl&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;/include/
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPENSSL_LIB_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;brew --prefix openssl&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;/lib/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이럼에도 불구하고, 간혹 같은 에러가 난다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;OPENSLL_LIB_DIR&lt;/code&gt;를 직접 설정해주면 됩니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPENSSL_INCLUDE_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/Cellar/openssl/&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;버전&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;/include/&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;아 그리고 나서, &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo clean&lt;/code&gt;을 해주고 다시 빌드하는걸 잊지 마세요. :)&lt;/p&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sfackler/rust-openssl&quot;&gt;https://github.com/sfackler/rust-openssl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sfackler/rust-openssl/issues/255#issuecomment-133463099&quot;&gt;https://github.com/sfackler/rust-openssl/issues/255#issuecomment-133463099&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 01 Oct 2016 01:00:00 +0900</pubDate>
        <link>http://realignist.me/code/2016/10/01/rust-osx-openssl-issue.html</link>
        <guid isPermaLink="true">http://realignist.me/code/2016/10/01/rust-osx-openssl-issue.html</guid>
        
        <category>development</category>
        
        <category>rust</category>
        
        <category>openssl</category>
        
        
        <category>Code</category>
        
      </item>
    
      <item>
        <title>Dynamic Motion, DM200H 가벼운 리뷰</title>
        <description>&lt;p&gt;개인적으로 밸런스드 아마츄어의 장점과 다이나믹 드라이버의 장점을 합친 하이브리드 이어폰을 좋아하는데 국내 기업이 세계 최초로 동축 배치의 하이브리드 이어폰을 출시했다는 이야기를 듣고 흥미를 느껴 DM-200H를 구해보았다.&lt;/p&gt;

&lt;p&gt;오디오 리뷰는 항상 그렇지만 전문적인 측정 장비가 없을 때는 개인의 주관적 특성을 탈 수 밖에 없다. 읽을 때에는 이 점에 부디 주의해줬으면 좋겠다. 또 개인적으로는 이어폰이나 헤드폰의 에이징(처음에 딱딱하게 굳어있는 진동판을 풀어주는 행위)이라는걸 별로 생각하지 않는 편이고 특별히 이퀄라이징을 해서 음악을 듣는 편도 아니다. 이 리뷰에서는 제품에 대한 일체의 에이징도 하지 않았음을 밝힌다.&lt;/p&gt;

&lt;p&gt;다이나믹 모션이라는 음향 장비를 생산하는 업체가 있다는 것은 최근에 지인이 DM100E를 사면서 알게 되었다.(그 지인이 쓴 DM100E 개봉기는 &lt;a href=&quot;http://blog.badalab.link/220708653084&quot;&gt;여기&lt;/a&gt;에서 볼 수 있다.) 근데 사실 그때도 다이나믹 모션에 대한 큰 관심은 없었고 이 업체가 한국 업체라는 것도 모르고 있었다. 나는 이 업체가 세계 최초로 동축 배치의 하이브리드 이어폰을 만들었다는 소식을 일본 매체를 통해 알게 되면서 이 기업이 한국 기업이라는걸 알게 되었다. 이 제품은 일본의 요도바시 카메라같은 곳에서 31000엔에 팔리고 있었고 한국에서도 대략 30만원 내외로 팔리겠구나라고 생각했는데, DMStore에서 판매하고 있는 가격은 198,000원이라서 해외에서 싸게 팔고 국내에서 비싸게 받는거에 익숙해져 있었던 나머지 좀 놀랐다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;특이한 하이브리드 유닛 구조와 제품 특성&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160706/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일단 구매하기 전에 다이나믹 모션이 특허(등록번호: 1014601700000)로 가지고 있는 드라이버 구조를 보았다. 다이나믹 모션에서 제공하는 위의 그림을 보면 알 수 있겠지만 다이나믹 드라이버가 도넛 모양으로 있고 가운데의 공간을 밸런스드 아마츄어 드라이버가 차지하는 구조를 가지고 있다. 다른 하이브리드 이어폰들은 각 드라이버가 따로 배치하는데, 동축으로 배치하면서 기존의 이어폰들이 가지고 있는 위상 차이를 극복했다고 한다. 저걸 보고 든 생각은 “이론상으로는 이해되지만 역시 실제로 들어봐야 알지”라는 생각이 강했던 것 같다.&lt;/p&gt;

&lt;p&gt;제품 정보로만 봤을 때 DM200H는 5Hz ~ 40kHz까지 재생할 수 있고, 24옴으로 꽤 낮은 임피던스를 가지고 있다. 또 선은 케블러 섬유로 감싸서 터치 노이즈를 최소화했다고 한다. 또 신기했던 점은 기본적으로 컴플라이 폼팁을 제공한다는 점이었다.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;언박싱&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160706/2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;택배 상자를 열어보니 DM200H, 여분의 컴플라이 폼팁 한쌍과 이어폰 청소를 위한 알콜 스왑 두개가 있었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160706/3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;박스를 열어보니 제품에 대한 상세한 설명과 함께 제품이 보인다. 이어팁들도 사이즈별로 보이고, 항공기에서 쓸 수 있는 플러그나 옷에 고정할 수 있는 클립, 그리고 대망의 이어폰.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160706/4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;실제로 어땠는가?&lt;/h2&gt;

&lt;p&gt;우선 착용감이 좋았다. 정말 다이나믹 드라이버 가운데에 BA 드라이버가 배치된 구조다보니 유닛이 생각했던 것보다 크지 않았고 편하게 착용할 수 있었다. 케이블도 그렇고 실제 전반적인 제품의 퀄리티가 매우 뛰어났다. 아쉬웠던 점은 보통 이 정도 되는 하이브리드 이어폰들이 대부분 선을 교체할 수 있거나, 아니면 기본적으로 4극 케이블로 스마트폰 컨트롤이 가능한데 이 부분은 아쉬웠던 것 같다.&lt;/p&gt;

&lt;p&gt;저음의 경우 역시 다이나믹 드라이버 특유의 타격감을 느낄 수 있다. 락 같은 경우 드럼이나 베이스의 악기 저음을 잘 느낄 수 있다. 고음은 내 생각과 좀 달랐던 것 같다. 처음 씨코에서 제공한 리뷰의 측정치를 봤을 때는 역시 전체 대역을 담당하는 BA 유닛 하나와 저음 대역을 담당하는 다이나믹 드라이버 하나로 구성되어서 그런가 고음이 아쉬운 것 같다는 생각이 들었는데, 실제로 내가 들어본 결과는 고음의 해상력도 괜찮았다. 여러 노래들을 들어보면서 여성 보컬의 가요 등도 듣기 좋을 것 같다는 생각이 들었다.&lt;/p&gt;

&lt;p&gt;특별히 장르로 추천을 하라고 하면 락과 일렉트로닉에 특히 좋을 것 같다고 이야기할 수 있지만, 보컬의 성별을 가리지도 않고 팝이나 R&amp;amp;B 등 장르도 특별히 가리지 않는 것 같다. 또 가격 대비 품질과 성능도 매우 훌륭한 편이라고 생각한다.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;독자적인 기술을 통해 장르나 음역을 가리지 않고 뛰어난 가성비와 해상력을 보여줌&lt;/li&gt;
  &lt;li&gt;타 하이브리드 이어폰에 비해 착용감이 편하며 소리의 이질감이 적음&lt;/li&gt;
  &lt;li&gt;케이블이 재생 컨트롤이 안되는 점이 아쉬움&lt;/li&gt;
  &lt;li&gt;이어팁을 갈아끼울 때 홈이 너무 깊어서 생긴 사소한 불편함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;한국 기업에서도 이런 높은 퀄리티의 이어폰을 만들 수 있다는 점에 감탄했고, 다이나믹모션이 준비 중이라고 하는 DM300H 모델도 자연스럽게 기대가 된다.&lt;/p&gt;

</description>
        <pubDate>Wed, 06 Jul 2016 01:00:00 +0900</pubDate>
        <link>http://realignist.me/life/2016/07/06/dm200h-review.html</link>
        <guid isPermaLink="true">http://realignist.me/life/2016/07/06/dm200h-review.html</guid>
        
        <category>life</category>
        
        <category>earphone</category>
        
        <category>이어폰</category>
        
        <category>dynamicmotion</category>
        
        <category>다이나믹모션</category>
        
        <category>dm200h</category>
        
        <category>dm200</category>
        
        
        <category>Life</category>
        
      </item>
    
      <item>
        <title>상반기를 정리하며.</title>
        <description>&lt;p&gt;6월이 끝나간다. 곧 있으면 7월이 다가오며 하반기가 된다. 상반기 동안 내가 뭘했을까 정리라도 해둬야 나중에 잊지 못할 것 같다는 생각이 들었다. 이 글이 공개될 때 쯤이면 아마 나는 이상한모임의 720 컨퍼런스에서 내가 취업하면서 나 자신이나, 포트폴리오 등을 관리한 이야기를 이야기한 뒤가 될 것 같다. 이 글에도 그 내용이 일부 들어있다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;생존하는 것에 대한 고찰&lt;/h2&gt;

&lt;p&gt;1월에 처음 세운 목표는 생존이었다. 작년에 내가 병원비로만 100만원을 썼다는 사실에 멘붕하면서 어떻게든 심신의 안정을 찾고 생활 패턴을 만들고 규칙적인 삶을 살아서 생존하는게 목표였다. 내가 병원에 쓰는 돈을 생각하면 1년에 100만원이 아니라 한달에 몇십만원을 쓰고 있으니 사실 삶을 유지하기 위한 코스트는 더 높아지긴 했다. 그리고 운동도 못했다, 이건 특유의 의지 박약과 인도어한걸 좋아하는 성격이 한 몫 했을 것 같다.&lt;/p&gt;

&lt;p&gt;근데 이상하게 작년과 올해 내가 느끼는 심리적인 지침은 확연하게 차이가 난다. 심리학에 대해서 관심이 많아지면서 계속 책을 읽고 상담도 꾸준히 받고 적극적으로 무언가를 하려고 했었던 것들이 분명 도움이 되었을 것이다. 상담이나 치료 등으로 돈이 많이 들었지만, 그 돈이 아깝지 않을만큼 내 마음에 조금이나마 안정을 준다는 생각도 들게 된 것이다.&lt;/p&gt;

&lt;p&gt;2년 가까이 습관성 수면제(심심치 않게 뉴스에 나오는 졸피뎀이 그것이다.)를 먹었던 것 같다. 이 약의 도움도 많이 받았지만 어느샌가 내가 계속 약으로만 잠들어야 하는가에 대한 회의감을 느끼게 되었다. 수면 습관을 어떻게든 만들면서 졸피뎀을 끊었는데 힘들지 않다고 하면 거짓말일 것이다. 지금도 과각성 상태가 되거나 할 때는 신경안정제를 먹긴 하지만 그래도 내가 먹는 약 중에서 마약류가 하나 줄었다는 사실만으로도 꽤 기뻤던 것 같다.&lt;/p&gt;

&lt;p&gt;어떻게 하면 더 잘 생존할 수 있을지에 대한 고민은 아직 많이 하고 있다. 하반기엔 어떻게 부족한 운동을 시작해야할까라는 고민도 해본다.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;책을 많이 읽게 된 이야기와 전자책&lt;/h2&gt;

&lt;p&gt;상반기에 나의 변화에 대해서 생각해보면 책을 많이 읽은 것에도 의미를 좀 두고 싶다. 모리 히로시의 S&amp;amp;M 시리즈같은 추리 소설부터 알프레드 아들러나 빅터 플랭클의 로고테라피같은 심리학 책, CPU와 컴파일러의 최적화나 LLVM에 관련된 기술 책, 하즈키 맛챠의 “내가 나로 있기 위해” 같은 만화책까지… 50권 넘는 책들을 상반기에 읽은 것 같다.&lt;/p&gt;

&lt;p&gt;사실 이상한모임에서 전자책에 대해 처음 접했을 때는 책이나 앨범에 대한 소유에 그 의미가 있다고 생각하고 전자책을 부정하게 됬었는데 굉장히 두꺼운 책들과 일본의 문고판 책들, 이런 경우들을 보니까 전자책이 생각보다 괜찮지 않을까라는 생각을 하게 되었다. 결국은 아이패드가 짱이었다. 리디북스 페이퍼의 E-ink 디스플레이는 나를 만족시키지 못했고, AMOLED 디스플레이를 탑재한 갤럭시탭S2는 막상 Epub 책을 열어보는게 버벅거렸다. 킨들, 리디북스, iBooks 등 플랫폼을 아우르지 않고 편안한 독서 경험을 아이패드가 제공한 것 같았다.&lt;/p&gt;

&lt;p&gt;인상적이었던 책들을 두 권만 골라보면 바빗 로스차일드의 “내 인생을 힘들게 하는 트라우마”가 내 자신의 PTSD 증상과 대응 방법 등에 대해 알 수 있는 좋은 책이었다고 생각하며, 제임스 팰런의 “괴물의 심연”은 인간의 반사회적인 기질에 대한 발현은 오히려 유전자같은 선천적인 영향보다도 후천적인 부분에 영향을 더 받는 것 같다는걸 느낄 수 있었다.&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;번역을 하고, 진짜 블로그를 관리하고.&lt;/h2&gt;

&lt;p&gt;내가 지금까지 블로그를 관리하는거는 글을 한번 쓰다가 블로그를 지우고 새로 만드는 것의 무한한 반복이었다. 이것은 의미없는 일이었기도 하지만, 꽤 좋은 글들도 날리기도 했다. (사실 브리즈번에서 토비님이나 오현석님을 만나게 됬던 계기도 내가 관리를 안하다가 날라간 블로그에 올렸던 글이다.) 올해 상반기는 정말 블로그를 만들어서 계속 꾸준히 쓰고 있다. Github에서 페이지를 서빙해주니까 유지 코스트가 들어가지 않아서 굉장히 좋은 것 같다.&lt;/p&gt;

&lt;p&gt;사실 블로그를 관리하면서 내 번역이나 글에 대해서 부족함을 많이 느끼는데, 그런 글도 잘 읽어주시는 분들에게 감사를 드리고 싶다. 사실 글재주 없는 공돌이로는 직접 계속 글을 쓰는게 도움이 되는 것 같고, 또 유시민의 글쓰기 특강이라는 책이 굉장히 인상적이었다. 아무튼 Qiita에서 좋은 글들을 보면 번역을 하고 싶은 생각이 들고, 그 생각을 생각에서 멈추지 않고 직접 트위터로 소통하고 번역할 수 있게 되었다.&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;프리랜서로 일하다가, 회사에 들어가고.&lt;/h2&gt;

&lt;p&gt;올해는 프리랜서로 일하는걸로 시작했다. 사실 쉬고 싶은 마음이 컸지만 사람이 사는데는 돈이 필요하니까 일을 할 수 밖에 없었다. 모 회사의 테스팅 플랫폼에 들어가는 탈옥 기반 iOS 리서치 과제라던가 모 서비스에서 영수증을 자동으로 인식하는 알고리즘 연구 등을 했었고 나중에는 안정적인 병원 치료를 위해 직장이 필요하다는걸 느끼고 회사에 들어가게 되었다.&lt;/p&gt;

&lt;p&gt;사실 이모콘에서도 이야기했지만 “내가 같이 일하고 싶은 사람”과 일하는게 중요하다는걸 고민하게 되었다. 프렌트립에 합류한건 딱 1개월 되었다. 일을 시작하기 2일 전에 회사에 가서 계약서에 도장을 찍을 때 소스코드 권한을 같이 받아서 소스를 리딩한게 어느 정도 이해하는데에 도움이 되었다.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;상반기에 한 것&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;생존에 대해서는 체중 감량 등에 대해서는 오히려 아쉬운 점이 많았지만, 생활 패턴을 되찾게 되고 졸피뎀을 끊었다. 나는 아직도 힘들고 만족스럽지는 않지만 병원에서는 그래도 90점 이상의, 빠른 치료 효과를 보이고 있다고 한다.&lt;/li&gt;
  &lt;li&gt;독서를 많이 했다. 아이패드를 통해 전자책에도 빠진 것 같다. 하반기에는 100권 가까이의 책을 읽을 수 있으면 좋겠다.&lt;/li&gt;
  &lt;li&gt;제대로 블로그를 관리하게 되었다. 재미있는 글들을 찾아 번역하는 재미를 느끼고, 뭔가 파고 싶은 것들이 있거나 아니면 생각을 정리할 때도 블로그는 유용한 것 같다.&lt;/li&gt;
  &lt;li&gt;프리랜서로 일하다가 프렌트립에 합류했고, 이번 상반기는 정말 같이 일하고 싶은 분들과 일할 수 있었던 것 같다. 열심히 그러면서도 재밌게 일하고 있어서 의미가 있는 것 같다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;하반기에 하고 싶은 것&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;우선 회사 일에 대한 욕심이 있는 것 같다. 제대로 된 안드로이드 앱을 고쳐서 내가 만든 서비스에서 나쁜 경험을 얻지 않게끔 하고 싶은 욕심이 있다.&lt;/li&gt;
  &lt;li&gt;트라우마에 대해 좀 편안하게 마주하고, 이인감이나 해리성 장애로 나의 정신을 해리시켜 도망치지 않고 싶다.&lt;/li&gt;
  &lt;li&gt;더 많은 좋은 글들을 번역하고 싶은 마음도 크고, 내 실력이 좀 더 늘어서 온전히 내가 좋은 글들을 쓸 수 있게 되었으면 좋겠다.&lt;/li&gt;
  &lt;li&gt;피 검사 등을 받아보면 모든 지표가 정상적이긴 한데, 체중과 체지방 양은 그래도 많고 높다. 개인 PT를 해서라도 좀 하반기엔 운동을 해봐야하지 않을까.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 02 Jul 2016 18:00:00 +0900</pubDate>
        <link>http://realignist.me/life/2016/07/02/half-report.html</link>
        <guid isPermaLink="true">http://realignist.me/life/2016/07/02/half-report.html</guid>
        
        <category>life</category>
        
        
        <category>Life</category>
        
      </item>
    
      <item>
        <title>Kotlin 코드를 문서화하자. (for Android)</title>
        <description>&lt;p&gt;처음 내가 Kotlin을 접할 때만 하더라도 많은 사람들이 Kotlin의 존재를 모르고 있었다. 그리고 Kotlin을 이리저리 설파하려고 하는 나조차도 최근에서야 나도 실무에서 Kotlin을 제대로 쓸 수 있게 되었다. 다른 사람과 협업을 할 때, 문서화는 중요하다. 내가 문법이나 이런걸 프로젝트에 문서화해둘 수는 없어도 프로젝트 안 클래스나 메소드, 프로퍼티들이 어떤 역할을 하고 있는지는 남길 수 있다.&lt;/p&gt;

&lt;p&gt;그래서 오늘은 실전 안드로이드 프로젝트에서 어떻게 Kotlin 코드를 문서화할 수 있는지에 대해서 이야기해보고자 한다. 나는 안드로이드 프로젝트를 기준으로 설명하고 있지만, 기본적으로는 Gradle 기반의 프로젝트라면 이 글이 도움이 되리라 믿는다.&lt;/p&gt;

&lt;h2 id=&quot;kdoc--&quot;&gt;KDoc을 남기는 방법&lt;/h2&gt;

&lt;p&gt;KDoc은 Kotlin의 Javadoc같은 개념이라고 생각하면 된다. &lt;code class=&quot;highlighter-rouge&quot;&gt;/**&lt;/code&gt;로 시작해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;*/&lt;/code&gt;로 끝이 난다. 여러 줄인데 매 줄마다 아스테리크 문자가 들어가는 형태이다. Kotlin 공식 문서가 제공하는 예시를 보자.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * A group of *members*.
 *
 * This class has no useful logic; it's just a documentation example.
 *
 * @param T the type of a member in this group.
 * @property name the name of this group.
 * @constructor Creates an empty group.
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**
     * Adds a [member] to this group.
     * @return the new size of the group.
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;그리고 KDoc은 인라인 마크업에 대해서는 C#의 xml같은 형태가 아니라 마크다운 문법을 따라하고 있다. 그리고 약간 특이한 점은 요런 식으로의 클래스, 프로퍼티, 메소드의 링킹이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Use [this method][doSomething] for this purpose.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;블록 태그를 지원하며 이 부분은 Javadoc과 굉장히 유사한데, Kotlin에서는 다음과 같은 블록 태그를 지원한다. 그리고 &lt;code class=&quot;highlighter-rouge&quot;&gt;deprecated&lt;/code&gt; 태그가 먹히지 않기 때문에 이 부분은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Deprecated&lt;/code&gt; 어노테이션을 달아줘야한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;param&lt;/li&gt;
  &lt;li&gt;return&lt;/li&gt;
  &lt;li&gt;constructor&lt;/li&gt;
  &lt;li&gt;property&lt;/li&gt;
  &lt;li&gt;throws, exception&lt;/li&gt;
  &lt;li&gt;sample&lt;/li&gt;
  &lt;li&gt;author&lt;/li&gt;
  &lt;li&gt;since&lt;/li&gt;
  &lt;li&gt;suppress&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;gradle-dokka-kotlin--export-&quot;&gt;Gradle에서 Dokka로 Kotlin 문서를 Export하는 방법&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;루트 프로젝트의 &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;을 열어 다음과 같이 추가한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;jcenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;maven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://dl.bintray.com/kotlin/kotlin-eap'&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;org.jetbrains.dokka:dokka-android-gradle-plugin:0.9.8&quot;&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;앱 혹은 라이브러리 프로젝트의 &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;을 다음과 같이 설정한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.jetbrains.dokka-android'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;afterEvaluate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;generateDebugAndroidTestSources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dependsOn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dokka&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dokka&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;moduleName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'...'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outputFormat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'html'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outputDirectory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;$projectDir/docs&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;processConfigurations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'compile'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;linkMapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;src/main/kotlin&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/.../.../blob/master/app/src/main/kotlin&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;suffix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#L&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sourceDirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'src/main/kotlin'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Dokka의 상세한 정보는 &lt;a href=&quot;https://github.com/Kotlin/dokka&quot;&gt;GitHub&lt;/a&gt;에서 볼 수 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;afterEvaluate&lt;/code&gt;에, &lt;code class=&quot;highlighter-rouge&quot;&gt;generateDebugAndroidTestSources&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;dokka&lt;/code&gt;에 의존 관계를 갖는다고 명시했기 때문에 프로젝트를 빌드할 때 문서는 자동으로 생성될 것이다.&lt;/p&gt;

&lt;h2 id=&quot;stylesheet--&quot;&gt;커스텀 Stylesheet를 적용하는 방법&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;빌드가 끝나면 css와 html 파일이 나오는데 화면의 스타일시트를 수정하고 싶을 때는  Dokka의 소스를 열…뻔 했지만 생각해보니 생성이 끝나고 css 파일만 바꿔치기해주면 된다는 방법을 깨닫고 짜치게 구현해봤다. 앱이나 라이브러리 프로젝트의 &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; 파일을 수정해보자.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.jetbrains.dokka-android'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;switchStylesheet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;overwrite:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Switching StyleSheet for Dokka'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${projectDir}/dokka/&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;style.css&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${projectDir}/docs/&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;afterEvaluate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;generateDebugAndroidTestSources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dependsOn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;switchStylesheet&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;switchStylesheet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dependsOn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dokka&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dokka&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;switchStylesheet&lt;/code&gt;라는 task를 만들었다. 얘는 &lt;code class=&quot;highlighter-rouge&quot;&gt;dock&lt;/code&gt; 태스크가 끝나면 실행되도록 의존성이 설정되어있고, 디버그 소스를 빌드할 때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;switchStylesheet&lt;/code&gt;에 의존성을 걸어주면 자연스럽게 동작하게 된다.&lt;/li&gt;
  &lt;li&gt;프로젝트 디렉토리에 dokka 폴더를 만들고, 그 안에 css 파일을 넣으면 잘 동작할 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;profit&quot;&gt;Profit!&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160624/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 깔끔하게 문서가 나온다! 이렇게 나오는 문서를 보니 기분이 너무 조크든요… 개인적으로 클린한 코드를 짰을 때, 좋은 문서를 봤을 때, 문서화를 잘 했을 때 기분이 너무 좋다. 넘나 좋은 것.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/kotlin-doc.html&quot;&gt;https://kotlinlang.org/docs/reference/kotlin-doc.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Kotlin/dokka&quot;&gt;https://github.com/Kotlin/dokka&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 24 Jun 2016 19:30:00 +0900</pubDate>
        <link>http://realignist.me/code/2016/06/24/kotlin-documentation.html</link>
        <guid isPermaLink="true">http://realignist.me/code/2016/06/24/kotlin-documentation.html</guid>
        
        <category>android</category>
        
        <category>kotlin</category>
        
        <category>development</category>
        
        <category>documentation</category>
        
        <category>kdoc</category>
        
        <category>dokka</category>
        
        
        <category>Code</category>
        
      </item>
    
      <item>
        <title>GDG Android Korea RxJava 스터디: 1회차</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;주제&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. Queue로써 Rx 활용
 - gdgand/android-rxjava
 
2. Lambda 동작의 이해
http://www.slideshare.net/jaxlondon2012/lambda-a-peek-under-the-hood-brian-goetz (p.19 ~)

3. 내가 RxJava 를 쓰는 이유
https://speakerdeck.com/jakewharton/android-development-with-kotlin-androidkw-number-001 (p.11)
http://www.slideshare.net/jpaumard/java-8-stream-api-and-rxjava-comparison (p.213 ~)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;queue-rx-&quot;&gt;1. Queue로 Rx 활용하기&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;푸쉬 메세지 예제
    &lt;ul&gt;
      &lt;li&gt;Device를 껐다가 켰을 때 오는 100개 정도의 알람을 해결할 때 사용함.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;commandQueue&lt;/code&gt;라는 PublishSubject를 만들고, &lt;code class=&quot;highlighter-rouge&quot;&gt;onBackPressureBuffer&lt;/code&gt;를 이용함.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PublishSubject&lt;/code&gt;는 크기의 한계가 있기 때문에 &lt;code class=&quot;highlighter-rouge&quot;&gt;onBackPressureBuffer&lt;/code&gt;를 같이 쓰는게 좋음.&lt;/li&gt;
      &lt;li&gt;이렇게 RxJava로 Queue를 구현하면 Multi-thread의 동시성 문제, &lt;code class=&quot;highlighter-rouge&quot;&gt;synchronize&lt;/code&gt; 등등 수많은 작업을 짧게 할 수 있음.&lt;/li&gt;
      &lt;li&gt;PublishSubject를 Queue처럼 활용할 수 있음.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;RecyclerView의 Adapter에서 Observable 안에서 백그라운드 쓰레드로 처리함으로써 RecyclerView의 Frame 속도를 개선할 수 있음.
    &lt;ul&gt;
      &lt;li&gt;에러의 예외처리같은 경우에는 RxRelay의 &lt;code class=&quot;highlighter-rouge&quot;&gt;PublishRelay&lt;/code&gt;를 쓰면 onError가 호출된 뒤에도 다시 emit을 받을 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;EventBus인 Otto를 RxJava로 옮기는 예제에서 PubSub를 쓰고 있기 때문에 예제를 체크해볼 필요가 있음.&lt;/li&gt;
  &lt;li&gt;CompositeSubscription의 &lt;code class=&quot;highlighter-rouge&quot;&gt;unsubscribe&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;clear&lt;/code&gt;의 차이?
    &lt;ul&gt;
      &lt;li&gt;거의 비슷하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;unsubscribed&lt;/code&gt;가 true냐 아니냐의 차이.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;참고자료&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=QdmkXL7XikQ&quot;&gt;https://github.com/ReactiveX/RxJava/blob/master/src/main/java/rx/subscriptions/CompositeSubscription.java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=QdmkXL7XikQ&quot;&gt;https://github.com/ReactiveX/RxJava/issues/2959&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=QdmkXL7XikQ&quot;&gt;https://www.youtube.com/watch?v=QdmkXL7XikQ&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=QdmkXL7XikQ&quot;&gt;https://speakerdeck.com/dlew/common-rxjava-mistakes&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lambda-----3--rxjava--&quot;&gt;2. Lambda식이 내부에서 어떻게 동작하는가. &amp;amp; 3. 내가 RxJava를 쓰는 이유&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;람다식이 동작하는 원리를 알기 위해서는 Java 7과 8의 스펙을 이해해야함.&lt;/li&gt;
  &lt;li&gt;자바 컴파일러는 람다 표현식을 &lt;code class=&quot;highlighter-rouge&quot;&gt;invokedynamic&lt;/code&gt;으로 컴파일한다.&lt;/li&gt;
  &lt;li&gt;Java 7에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;invokedynamic&lt;/code&gt;이라는 바이트코드가 폴리글랏을 지원하기 위해 새로 추가됨
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;invokedynamic&lt;/code&gt;의 인자는 Bootstrap Method에 대한 레퍼런스다.&lt;/li&gt;
      &lt;li&gt;Bootstrap Method는 &lt;code class=&quot;highlighter-rouge&quot;&gt;CallSite&lt;/code&gt; 인스턴스를 생성하며, 이 인스턴스는 런타임에 적합한 메소드를 실행하는 역할을 한다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CallSite&lt;/code&gt; 인스턴스에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;MethodHandle&lt;/code&gt;이 연결되어있고, 런타임에서 JVM에 의해 실행된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Android에서는 Java 8의 람다 표현식이나 Stream API를 쓸 수 없음. 람다 표현식을 쓰기 위한 방법은 바이트코드 레벨에서 백포팅해주는 Retrolambda를 이용할 수 있음.&lt;/li&gt;
  &lt;li&gt;Stream API를 쓰는데에는 RxJava나 LightweightStream, FunctionalJava 등이 있지만 승욱님이 당시에 알아봤을 때는 RxJava가 제일 잘 맞았기 때문에 이것을 쓰게 되었음.&lt;/li&gt;
  &lt;li&gt;물론 Stream API와 직접 비교를 하면 당연히 RxJava가 한참 느릴 수 밖에 없음.
    &lt;ul&gt;
      &lt;li&gt;특히 ParallelStream이 병렬적으로 처리를 하기 때문에 특히 더 빠르지만, 동시성 문제에 대해서 조심해서 사용해야함.&lt;/li&gt;
      &lt;li&gt;이 ParallelStream은 Java 7에 추가된 동시성 처리를 위한 Fork/Join을 이용해서 만들어짐.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;참고자료들&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24629247/where-does-official-documentation-say-that-javas-parallel-stream-operations-use&quot;&gt;https://docs.oracle.com/javase/7/docs/api/java/lang/invoke/MethodHandle.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24629247/where-does-official-documentation-say-that-javas-parallel-stream-operations-use&quot;&gt;https://slipp.net/wiki/pages/viewpage.action?pageId=19530380&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24629247/where-does-official-documentation-say-that-javas-parallel-stream-operations-use&quot;&gt;https://groups.google.com/forum/#!topic/ksug/wrFMOwFugwY&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24629247/where-does-official-documentation-say-that-javas-parallel-stream-operations-use&quot;&gt;https://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24629247/where-does-official-documentation-say-that-javas-parallel-stream-operations-use&quot;&gt;http://www.oracle.com/technetwork/articles/java/fork-join-422606.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24629247/where-does-official-documentation-say-that-javas-parallel-stream-operations-use&quot;&gt;https://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24629247/where-does-official-documentation-say-that-javas-parallel-stream-operations-use&quot;&gt;http://stackoverflow.com/questions/24629247/where-does-official-documentation-say-that-javas-parallel-stream-operations-use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;후기&lt;/h2&gt;

&lt;p&gt;이번과 같이 Java의 언어 기능의 동작 원리를 알기 위해서는 언어 표준과 바이트코드까지에 대한 지식이 필요한데 개인적으로는 이렇게 깊게까지 공부해본 적이 없었기 때문에 좀 더 공부가 필요하다는 것을 많이 느꼈습니다. 개인적으로 Java 7에서 추가된 기능들이 그렇게 크지 않다고 생각했는데, 람다식과 병렬 스트림을 위해서 필요한 개념들은 Java 7에 추가되었다는 것을 보고 반성하게 되었습니다.&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Jun 2016 10:00:00 +0900</pubDate>
        <link>http://realignist.me/code/2016/06/09/rxjava-study-1.html</link>
        <guid isPermaLink="true">http://realignist.me/code/2016/06/09/rxjava-study-1.html</guid>
        
        <category>android</category>
        
        <category>rxjava</category>
        
        <category>development</category>
        
        <category>observable</category>
        
        
        <category>Code</category>
        
      </item>
    
      <item>
        <title>[번역] 쓰기 시작하면 멈출 수 없어지는 Swift Extension 모음</title>
        <description>&lt;p&gt;이 글은 tattn님이 Qiita에 올린 &lt;a href=&quot;http://qiita.com/tattn/items/647e094936287a6bd2d3&quot;&gt;글&lt;/a&gt;을 한국어로 번역한 글입니다. 번역을 허락해주신 tattn님께 감사합니다. Swift를 쓰면서 생산성을 높여주는 짤막한 코드들이 인상적입니다. 혹시 어떤 부분이 제일 인상적이었는지 댓글로 남겨주셔도 좋을 것 같습니다.&lt;/p&gt;

&lt;p&gt;범용성 높은 Extension 집입니다. 후반에 있는 라이브러리도 정리했습니다. Swift 2.2 기준으로 확인되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;클래스 이름의 표시&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;dynamicType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &quot;MyClass&quot;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &quot;MyClass&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;xib--&quot;&gt;XIB를 등록하고 호출하기&lt;/h2&gt;

&lt;p&gt;XIB 파일과 클래스 이름을 똑같이 설정한 뒤 이용해주세요. 위에서 이야기한 “클래스 이름의 표시”를 활용하고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;uitableview&quot;&gt;UITableView&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registerCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UINib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nibName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;registerNib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forCellReuseIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registerCells&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dequeueCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UITableViewCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dequeueReusableCellWithIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;registerCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;registerCells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyCell1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyCell2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dequeueCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;uicollectionview&quot;&gt;UICollectionView&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registerCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionViewCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UINib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nibName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;registerNib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forCellWithReuseIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registerCells&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionViewCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registerReusableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionReusableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionElementKindSectionHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UINib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nibName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;registerNib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forSupplementaryViewOfKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;withReuseIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registerReusableViews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionReusableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionElementKindSectionHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerReusableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dequeueCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionViewCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forIndexPath&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dequeueReusableCellWithReuseIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dequeueReusableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionReusableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UICollectionElementKindSectionHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dequeueReusableSupplementaryViewOfKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;withReuseIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;registerCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;registerCells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyCell1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyCell2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dequeueCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;registerReusableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyReusableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;registerReusableViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;MyReusableView1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyReusableView2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dequeueReusableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MyReusableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;nscolor-&quot;&gt;16진수를 이용해서 NSColor 만들기&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;convenience&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFF0000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;255.0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00FF00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;255.0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0000FF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;255.0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xAABBCC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;uiviewcontroller--&quot;&gt;제일 최상위 UIViewController 객체를 가져오기&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;topViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;topViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sharedApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootViewController&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;presentedViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topViewController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;presentedViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;topViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;presentedViewController&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topViewController&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kt&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sharedApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;topViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;storyboard-viewcontroller-&quot;&gt;Storyboard의 ViewController 생성하기&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StoryBoardHelper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StoryBoardHelper&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;storyboard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIStoryboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storyboard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instantiateViewControllerWithIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;storyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;storyboard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIStoryboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storyboard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instantiateViewControllerWithIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;StoryBoardHelper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Storyboard 파일과 클래스 이름이 같을 때&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;MyViewController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Storyboard 파일과 클래스 이름이 다를 때&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;MyViewController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MyStoryboard&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위에서 이야기한 “클래스 이름의 표시”를 활용하고 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;xib-view-&quot;&gt;XIB의 View를 생성&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NibHelper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NibHelper&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UINib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nibName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instantiateWithOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Self&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NibHelper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kt&quot;&gt;MyView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;XIB 파일과 클래스 이름을 똑같이 설정한 뒤 이용해주세요. 위에서 이야기한 “클래스 이름의 표시”를 활용하고 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;view-&quot;&gt;모든 자식 View를 죽이기&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;removeAllSubviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subview&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;subview&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeFromSuperview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeAllSubViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;selector-&quot;&gt;Selector를 모으기&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Selector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;buttonTapped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#selector(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MyViewController.buttonTapped(_:)&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttonTapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forControlEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TouchUpInside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-1&quot;&gt;라이브러리&lt;/h2&gt;
&lt;p&gt;개발을 쉽게 해주는 다용도 extension 계의 라이브러리를 정리했습니다.&lt;/p&gt;

&lt;h3 id=&quot;swiftdatehttpsgithubcommalcommacswiftdate&quot;&gt;&lt;a href=&quot;https://github.com/malcommac/SwiftDate&quot;&gt;SwiftDate&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;NSDate를 쉽게 쓸 수  있게 만들어주는 라이브러리&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;date1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;date2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;2016-01-05T22:10:55.200Z&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;DateFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ISO8601&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;date3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;22/01/2016&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;DateFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dd/MM/yyyy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;date4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hours&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromNow&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;date5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;years&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;months&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hours&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;더 자세히 알고 싶으신 분들은 &lt;a href=&quot;https://github.com/malcommac/SwiftDate/blob/master/Documentation/UserGuide.md&quot;&gt;여기&lt;/a&gt;에서.&lt;/p&gt;

&lt;h3 id=&quot;chameleonhttpsgithubcomviccalexanderchameleon&quot;&gt;&lt;a href=&quot;https://github.com/ViccAlexander/Chameleon&quot;&gt;Chameleon&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160605/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;좋은 느낌의 플랫 컬러를 제공해주는 라이브러리&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;color1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flatGreenColorDark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;color2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FlatGreenDark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 위의 축약형&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;color3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RandomFlatColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;color4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ComplementaryFlatColorOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 보색&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pinkColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;FlatGreen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexValue&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &quot;2ecc71&quot;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;averageColorFromImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;컨트롤의 색을 일괄적으로 변경하는 것도 가능합니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kt&quot;&gt;Chameleon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setGlobalThemeUsingPrimaryColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;FlatBlue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;withSecondaryColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FlatMagenta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;andContentStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIContentStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Contrast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;rswifthttpsgithubcommac-cain13rswift&quot;&gt;&lt;a href=&quot;https://github.com/mac-cain13/R.swift&quot;&gt;R.swift&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;안드로이드의 R.java와 같이 파일 이름 등을 프로퍼티화해주는 라이브러리입니다. Typo가 컴파일 시점에 알 수 있으니 행복해집니다.&lt;/p&gt;

&lt;p&gt;Before&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;icon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;settings-icon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;San Francisco&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;viewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CustomViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nibName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;CustomView&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;welcome.withName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;currentLocale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Arthur Dent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;icon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;settingsIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sanFrancisco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;viewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CustomViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localizable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;welcomeWithName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Arthur Dent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;swiftstringhttpsgithubcomamayneswiftstring&quot;&gt;&lt;a href=&quot;https://github.com/amayne/SwiftString&quot;&gt;SwiftString&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;String에 편리한 메소드를 추가해주는 라이브러리입니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;s&quot;&gt;&quot;foobar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &quot;1,2,3&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &quot;world&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &quot;he&quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&quot;hi hi ho hey hihey&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;swiftyuserdefaultshttpsgithubcomradexswiftyuserdefaults&quot;&gt;&lt;a href=&quot;https://github.com/radex/SwiftyUserDefaults&quot;&gt;SwiftyUserDefaults&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;NSUserDefaults를 Swift스럽게 쓰게 해주는 라이브러리입니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DefaultsKeys&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DefaultsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;launchCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DefaultsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;launchCount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 값을 가져오거나 설정하기&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hotkeyEnabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 값의 변경&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;launchCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;… can easily be extended!&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 배열의 작업&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libraries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SwiftyUserDefaults&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libraries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; 2.0&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 커스텀 타입도 OK&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSColor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;whiteColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;whiteComponent&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; 1.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;textattributeshttpsgithubcomdelbatextattributes&quot;&gt;&lt;a href=&quot;https://github.com/delba/TextAttributes&quot;&gt;TextAttributes&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160605/2.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;NSAttributedString를 쉽게 설정할 수 있는 라이브러리입니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attrs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TextAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;HelveticaNeue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;foregroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lineHeightMultiple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;NSAttributedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ほげ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;asynchttpsgithubcomduemunkasync&quot;&gt;&lt;a href=&quot;https://github.com/duemunk/Async&quot;&gt;Async&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Grand Central Dispatch (GCD)를 쉽게 쓰게 해주는 라이브러리입니다.&lt;/p&gt;

&lt;p&gt;Before&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;nf&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dispatch_get_global_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;DISPATCH_QUEUE_PRIORITY_BACKGROUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is run on the background queue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is run on the main queue, after the previous block&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kt&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;background&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is run on the background queue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is run on the main queue, after the previous block&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;asynckithttpsgithubcommishimayasynckit&quot;&gt;&lt;a href=&quot;https://github.com/mishimay/AsyncKit&quot;&gt;AsyncKit&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/mishimay/items/7df447969a1c38d856d8&quot;&gt;http://qiita.com/mishimay/items/7df447969a1c38d856d8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;여러 비동기 처리를 끝낸 뒤 다음 작업을 할 수 있게 도와주는 라이브러리입니다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AsyncKit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;one&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;two&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; Success([&quot;one&quot;, &quot;two&quot;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Sun, 05 Jun 2016 12:00:00 +0900</pubDate>
        <link>http://realignist.me/code/2016/06/05/swift-snippets.html</link>
        <guid isPermaLink="true">http://realignist.me/code/2016/06/05/swift-snippets.html</guid>
        
        <category>ios</category>
        
        <category>swift</category>
        
        <category>development</category>
        
        <category>async</category>
        
        <category>color</category>
        
        <category>string</category>
        
        
        <category>Code</category>
        
      </item>
    
      <item>
        <title>Samsung Portable SSD T3 짧은 리뷰</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;사게 된 계기?&lt;/h2&gt;
&lt;p&gt;프렌트립에 입사하면서 쓰게 된 장비가 iMac 4K인데, RAM도 16GB로 넉넉한 편이었지만 딱 하나 크리티컬하게 부족했던건 내장 공간이 HDD라서 빌드나 여러 작업을 할 때 느리다는 문제가 있었다. ‘그래서 외장 SSD를 내장처럼 쓰고 부팅 디스크로 쓰면 어떨까?’라는 생각이 들었고, 회사에 지원 요청을 해서 출근 첫 날 같이 셋팅할 수 있게 되었다. 개인적으로는 매일 페이스북에서 질풍기획과 같이 콜라보하던 광고가 보였는데, 매일 광고로만 보던 외장 SSD를 내가 실제로 쓰게 될 줄은 몰랐다.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;구성&lt;/h2&gt;

&lt;p&gt;박스를 열어보니 아래 사진과 같이 SSD와 케이스가 도착을 했다. SSD에 가죽 케이스를 끼워야 하나 싶기도 한데, 메탈 바디와 가격이 외장하드보다 훨씬 비싸다는 것을 생각하면 충분히 납득이 될 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160601/1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우선 T3부터 살펴보자. 맥과 윈도우 모두 사용할 수 있고, 심지어는 안드로이드에서도 사용할 수 있다고 적혀있다. 내가 산 모델은 250GB 모델인데, 1TB 하드디스크와 같이 사용할걸 생각하면 꽤 괜찮은 용량이라고 생각한다. 물론 많으면 많을수록 좋지만…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160601/2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;포장을 벗기고 T3을 한 손으로 쥐어보았다. 한 손으로 잡히는 이 매우 작고 가벼운 외장 SSD는 확실히 외장 하드디스크보다 충분히 매력적이라고 생각한다. 윗면에 연결 단자는 USB 3.1 Type-C 형태를 쓰고 있고, 케이블로는 기존 USB(Type-A)와 연결하는 케이블을 준다. 가죽 파우치는 매우 심플하게 생겨서 뭔가 더 설명이 필요가 없을 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160601/5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160601/4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;그럼 한번 실제로 써보자.&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160601/6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일단 나는 데이터를 마이그레이션하기 위해 내 맥북에 외장 SSD를 연결했고, 내가 기존에 쓰던 맥북의 PCIe SSD의 파티션을 그대로 덤프했다. 덤프에 걸리는 시간은 약 7분 정도였다. 그리고 아이맥에 그대로 꽂으니 부팅이 정상적으로 작동한다. 기기의 ID가 달라졌기 때문에 상용 프로그램들은 다시 한번 인증을 해야했다.&lt;/p&gt;

&lt;p&gt;과연 그러면 실제 측정 속도는 얼마나 될까? 맥에서 많이 쓰이는 Blackmagic Disk Speed Test를 통해 측정해보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160601/benchmark.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;읽기 속도 427MB/s, 쓰기 속도 303.9MB/s. PCIe나 NVMe m.2.같이 신형 SSD만큼 속도가 빠른건 아니지만 USB를 사용하는 TLC SSD로는 매우 만족스러운 속도가 나온다고 생각한다. 실제로 프로젝트를 빌드하거나 할 때 속도가 느리다는 생각이 들지 않게 되었다. 개인적으로는 삼성이 Thunderbolt를 이용한 전문가용 고속 외장 SSD도 만들면 어떨까라고 생각해본다.&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;충분히 매력적인 크기와 무게, 속도까지 겸비했다. 내장 드라이브처럼 써도 괜찮을지는 좀 더 지켜보고 이야기할 수 있겠지만, 아직까지는 매우 만족스럽다. 그리고 회사에서 장비를 잘 지원해줘서 좋다. 아직 백엔드 개발자를 뽑고 있으니… 관심 있으신 분들은 언제든지 연락 주세요! (참고로 안드로이드는 제가 하고 있습니다.)&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ko&quot;&gt;&lt;p lang=&quot;ko&quot; dir=&quot;ltr&quot;&gt;♚♚안드로이드♚♚ §§백엔드§§ ♜개발자♜를 뽑.습.니.다. §§입사시§§전원 맥북레티나☜☜ 100% 증정※ @@최대1억원@@의 $연봉$ 즉시이동 &amp;gt;&amp;gt;&amp;gt; &lt;a href=&quot;https://t.co/S0ndG6T6XF&quot;&gt;https://t.co/S0ndG6T6XF&lt;/a&gt; &amp;lt;&amp;lt;&amp;lt;&lt;/p&gt;&amp;mdash; Wanbok Choi (@wanbok) &lt;a href=&quot;https://twitter.com/wanbok/status/734747658422607872&quot;&gt;2016년 5월 23일&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Thu, 02 Jun 2016 11:50:00 +0900</pubDate>
        <link>http://realignist.me/gadget/2016/06/02/samsung-t3-short-review.html</link>
        <guid isPermaLink="true">http://realignist.me/gadget/2016/06/02/samsung-t3-short-review.html</guid>
        
        <category>Portable</category>
        
        <category>SSD</category>
        
        <category>T3</category>
        
        <category>Samsung</category>
        
        <category>frientrip</category>
        
        
        <category>Gadget</category>
        
      </item>
    
  </channel>
</rss>
