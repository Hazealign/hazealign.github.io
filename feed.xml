<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Haze Lee</title>
    <description>책, 음악, 코딩, 피카츄와 함께하는 곳.</description>
    <link>http://realignist.me/</link>
    <atom:link href="http://realignist.me/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 01 Dec 2016 17:55:47 +0900</pubDate>
    <lastBuildDate>Thu, 01 Dec 2016 17:55:47 +0900</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>macOS 기준 Rust에서 OpenSSL과 관련된 빌드 오류 해결하기</title>
        <description>&lt;p&gt;Rust로 OpenSSL과 연결된 것들을 빌드할 때, 간혹 다음과 같은 에러를 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
--- stderr
/…/openssl-sys-0.6.4/src/openssl_shim.c:1:10: fatal error: &#39;openssl/hmac.h&#39; file not found
#include &amp;lt;openssl/hmac.h&amp;gt;
         ^
1 error generated.
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이럴 때는 다음과 같이 해결할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;brew install openssl

 &lt;span class=&quot;c&quot;&gt;# 다음 내용을 환경 변수로 추가해주세요.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPENSSL_INCLUDE_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;brew --prefix openssl&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;/include/
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPENSSL_LIB_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;brew --prefix openssl&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;/lib/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;이럼에도 불구하고, 간혹 같은 에러가 난다면 &lt;code&gt;OPENSLL_LIB_DIR&lt;/code&gt;를 직접 설정해주면 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OPENSSL_INCLUDE_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/Cellar/openssl/&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;버전&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;/include/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;아 그리고 나서, &lt;code&gt;cargo clean&lt;/code&gt;을 해주고 다시 빌드하는걸 잊지 마세요. :)&lt;/p&gt;

&lt;h1 id=&quot;reference&quot;&gt;Reference&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sfackler/rust-openssl&quot;&gt;https://github.com/sfackler/rust-openssl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sfackler/rust-openssl/issues/255#issuecomment-133463099&quot;&gt;https://github.com/sfackler/rust-openssl/issues/255#issuecomment-133463099&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 01 Oct 2016 01:00:00 +0900</pubDate>
        <link>http://realignist.me/code/2016/10/01/rust-osx-openssl-issue.html</link>
        <guid isPermaLink="true">http://realignist.me/code/2016/10/01/rust-osx-openssl-issue.html</guid>
        
        <category>featured</category>
        
        <category>development</category>
        
        <category>rust</category>
        
        <category>openssl</category>
        
        
        <category>code</category>
        
      </item>
    
      <item>
        <title>Dynamic Motion, DM200H 가벼운 리뷰</title>
        <description>&lt;p&gt;개인적으로 밸런스드 아마츄어의 장점과 다이나믹 드라이버의 장점을 합친 하이브리드 이어폰을 좋아하는데 국내 기업이 세계 최초로 동축 배치의 하이브리드 이어폰을 출시했다는 이야기를 듣고 흥미를 느껴 DM-200H를 구해보았다.&lt;/p&gt;

&lt;p&gt;오디오 리뷰는 항상 그렇지만 전문적인 측정 장비가 없을 때는 개인의 주관적 특성을 탈 수 밖에 없다. 읽을 때에는 이 점에 부디 주의해줬으면 좋겠다. 또 개인적으로는 이어폰이나 헤드폰의 에이징(처음에 딱딱하게 굳어있는 진동판을 풀어주는 행위)이라는걸 별로 생각하지 않는 편이고 특별히 이퀄라이징을 해서 음악을 듣는 편도 아니다. 이 리뷰에서는 제품에 대한 일체의 에이징도 하지 않았음을 밝힌다.&lt;/p&gt;

&lt;p&gt;다이나믹 모션이라는 음향 장비를 생산하는 업체가 있다는 것은 최근에 지인이 DM100E를 사면서 알게 되었다.(그 지인이 쓴 DM100E 개봉기는 &lt;a href=&quot;http://blog.badalab.link/220708653084&quot;&gt;여기&lt;/a&gt;에서 볼 수 있다.) 근데 사실 그때도 다이나믹 모션에 대한 큰 관심은 없었고 이 업체가 한국 업체라는 것도 모르고 있었다. 나는 이 업체가 세계 최초로 동축 배치의 하이브리드 이어폰을 만들었다는 소식을 일본 매체를 통해 알게 되면서 이 기업이 한국 기업이라는걸 알게 되었다. 이 제품은 일본의 요도바시 카메라같은 곳에서 31000엔에 팔리고 있었고 한국에서도 대략 30만원 내외로 팔리겠구나라고 생각했는데, DMStore에서 판매하고 있는 가격은 198,000원이라서 해외에서 싸게 팔고 국내에서 비싸게 받는거에 익숙해져 있었던 나머지 좀 놀랐다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;특이한 하이브리드 유닛 구조와 제품 특성&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160706/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일단 구매하기 전에 다이나믹 모션이 특허(등록번호: 1014601700000)로 가지고 있는 드라이버 구조를 보았다. 다이나믹 모션에서 제공하는 위의 그림을 보면 알 수 있겠지만 다이나믹 드라이버가 도넛 모양으로 있고 가운데의 공간을 밸런스드 아마츄어 드라이버가 차지하는 구조를 가지고 있다. 다른 하이브리드 이어폰들은 각 드라이버가 따로 배치하는데, 동축으로 배치하면서 기존의 이어폰들이 가지고 있는 위상 차이를 극복했다고 한다. 저걸 보고 든 생각은 “이론상으로는 이해되지만 역시 실제로 들어봐야 알지”라는 생각이 강했던 것 같다.&lt;/p&gt;

&lt;p&gt;제품 정보로만 봤을 때 DM200H는 5Hz ~ 40kHz까지 재생할 수 있고, 24옴으로 꽤 낮은 임피던스를 가지고 있다. 또 선은 케블러 섬유로 감싸서 터치 노이즈를 최소화했다고 한다. 또 신기했던 점은 기본적으로 컴플라이 폼팁을 제공한다는 점이었다.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;언박싱&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160706/2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;택배 상자를 열어보니 DM200H, 여분의 컴플라이 폼팁 한쌍과 이어폰 청소를 위한 알콜 스왑 두개가 있었다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160706/3.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;박스를 열어보니 제품에 대한 상세한 설명과 함께 제품이 보인다. 이어팁들도 사이즈별로 보이고, 항공기에서 쓸 수 있는 플러그나 옷에 고정할 수 있는 클립, 그리고 대망의 이어폰.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160706/4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;실제로 어땠는가?&lt;/h2&gt;

&lt;p&gt;우선 착용감이 좋았다. 정말 다이나믹 드라이버 가운데에 BA 드라이버가 배치된 구조다보니 유닛이 생각했던 것보다 크지 않았고 편하게 착용할 수 있었다. 케이블도 그렇고 실제 전반적인 제품의 퀄리티가 매우 뛰어났다. 아쉬웠던 점은 보통 이 정도 되는 하이브리드 이어폰들이 대부분 선을 교체할 수 있거나, 아니면 기본적으로 4극 케이블로 스마트폰 컨트롤이 가능한데 이 부분은 아쉬웠던 것 같다. &lt;/p&gt;

&lt;p&gt;저음의 경우 역시 다이나믹 드라이버 특유의 타격감을 느낄 수 있다. 락 같은 경우 드럼이나 베이스의 악기 저음을 잘 느낄 수 있다. 고음은 내 생각과 좀 달랐던 것 같다. 처음 씨코에서 제공한 리뷰의 측정치를 봤을 때는 역시 전체 대역을 담당하는 BA 유닛 하나와 저음 대역을 담당하는 다이나믹 드라이버 하나로 구성되어서 그런가 고음이 아쉬운 것 같다는 생각이 들었는데, 실제로 내가 들어본 결과는 고음의 해상력도 괜찮았다. 여러 노래들을 들어보면서 여성 보컬의 가요 등도 듣기 좋을 것 같다는 생각이 들었다.&lt;/p&gt;

&lt;p&gt;특별히 장르로 추천을 하라고 하면 락과 일렉트로닉에 특히 좋을 것 같다고 이야기할 수 있지만, 보컬의 성별을 가리지도 않고 팝이나 R&amp;amp;B 등 장르도 특별히 가리지 않는 것 같다. 또 가격 대비 품질과 성능도 매우 훌륭한 편이라고 생각한다.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;독자적인 기술을 통해 장르나 음역을 가리지 않고 뛰어난 가성비와 해상력을 보여줌&lt;/li&gt;
  &lt;li&gt;타 하이브리드 이어폰에 비해 착용감이 편하며 소리의 이질감이 적음&lt;/li&gt;
  &lt;li&gt;케이블이 재생 컨트롤이 안되는 점이 아쉬움&lt;/li&gt;
  &lt;li&gt;이어팁을 갈아끼울 때 홈이 너무 깊어서 생긴 사소한 불편함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;한국 기업에서도 이런 높은 퀄리티의 이어폰을 만들 수 있다는 점에 감탄했고, 다이나믹모션이 준비 중이라고 하는 DM300H 모델도 자연스럽게 기대가 된다.&lt;/p&gt;

</description>
        <pubDate>Wed, 06 Jul 2016 01:00:00 +0900</pubDate>
        <link>http://realignist.me/life/2016/07/06/dm200h-review.html</link>
        <guid isPermaLink="true">http://realignist.me/life/2016/07/06/dm200h-review.html</guid>
        
        <category>featured</category>
        
        <category>life</category>
        
        <category>earphone</category>
        
        <category>이어폰</category>
        
        <category>dynamicmotion</category>
        
        <category>다이나믹모션</category>
        
        <category>dm200h</category>
        
        <category>dm200</category>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>상반기를 정리하며.</title>
        <description>&lt;p&gt;6월이 끝나간다. 곧 있으면 7월이 다가오며 하반기가 된다. 상반기 동안 내가 뭘했을까 정리라도 해둬야 나중에 잊지 못할 것 같다는 생각이 들었다. 이 글이 공개될 때 쯤이면 아마 나는 이상한모임의 720 컨퍼런스에서 내가 취업하면서 나 자신이나, 포트폴리오 등을 관리한 이야기를 이야기한 뒤가 될 것 같다. 이 글에도 그 내용이 일부 들어있다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;생존하는 것에 대한 고찰&lt;/h2&gt;

&lt;p&gt;1월에 처음 세운 목표는 생존이었다. 작년에 내가 병원비로만 100만원을 썼다는 사실에 멘붕하면서 어떻게든 심신의 안정을 찾고 생활 패턴을 만들고 규칙적인 삶을 살아서 생존하는게 목표였다. 내가 병원에 쓰는 돈을 생각하면 1년에 100만원이 아니라 한달에 몇십만원을 쓰고 있으니 사실 삶을 유지하기 위한 코스트는 더 높아지긴 했다. 그리고 운동도 못했다, 이건 특유의 의지 박약과 인도어한걸 좋아하는 성격이 한 몫 했을 것 같다.&lt;/p&gt;

&lt;p&gt;근데 이상하게 작년과 올해 내가 느끼는 심리적인 지침은 확연하게 차이가 난다. 심리학에 대해서 관심이 많아지면서 계속 책을 읽고 상담도 꾸준히 받고 적극적으로 무언가를 하려고 했었던 것들이 분명 도움이 되었을 것이다. 상담이나 치료 등으로 돈이 많이 들었지만, 그 돈이 아깝지 않을만큼 내 마음에 조금이나마 안정을 준다는 생각도 들게 된 것이다.&lt;/p&gt;

&lt;p&gt;2년 가까이 습관성 수면제(심심치 않게 뉴스에 나오는 졸피뎀이 그것이다.)를 먹었던 것 같다. 이 약의 도움도 많이 받았지만 어느샌가 내가 계속 약으로만 잠들어야 하는가에 대한 회의감을 느끼게 되었다. 수면 습관을 어떻게든 만들면서 졸피뎀을 끊었는데 힘들지 않다고 하면 거짓말일 것이다. 지금도 과각성 상태가 되거나 할 때는 신경안정제를 먹긴 하지만 그래도 내가 먹는 약 중에서 마약류가 하나 줄었다는 사실만으로도 꽤 기뻤던 것 같다.&lt;/p&gt;

&lt;p&gt;어떻게 하면 더 잘 생존할 수 있을지에 대한 고민은 아직 많이 하고 있다. 하반기엔 어떻게 부족한 운동을 시작해야할까라는 고민도 해본다.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;책을 많이 읽게 된 이야기와 전자책&lt;/h2&gt;

&lt;p&gt;상반기에 나의 변화에 대해서 생각해보면 책을 많이 읽은 것에도 의미를 좀 두고 싶다. 모리 히로시의 S&amp;amp;M 시리즈같은 추리 소설부터 알프레드 아들러나 빅터 플랭클의 로고테라피같은 심리학 책, CPU와 컴파일러의 최적화나 LLVM에 관련된 기술 책, 하즈키 맛챠의 “내가 나로 있기 위해” 같은 만화책까지… 50권 넘는 책들을 상반기에 읽은 것 같다.&lt;/p&gt;

&lt;p&gt;사실 이상한모임에서 전자책에 대해 처음 접했을 때는 책이나 앨범에 대한 소유에 그 의미가 있다고 생각하고 전자책을 부정하게 됬었는데 굉장히 두꺼운 책들과 일본의 문고판 책들, 이런 경우들을 보니까 전자책이 생각보다 괜찮지 않을까라는 생각을 하게 되었다. 결국은 아이패드가 짱이었다. 리디북스 페이퍼의 E-ink 디스플레이는 나를 만족시키지 못했고, AMOLED 디스플레이를 탑재한 갤럭시탭S2는 막상 Epub 책을 열어보는게 버벅거렸다. 킨들, 리디북스, iBooks 등 플랫폼을 아우르지 않고 편안한 독서 경험을 아이패드가 제공한 것 같았다.&lt;/p&gt;

&lt;p&gt;인상적이었던 책들을 두 권만 골라보면 바빗 로스차일드의 “내 인생을 힘들게 하는 트라우마”가 내 자신의 PTSD 증상과 대응 방법 등에 대해 알 수 있는 좋은 책이었다고 생각하며, 제임스 팰런의 “괴물의 심연”은 인간의 반사회적인 기질에 대한 발현은 오히려 유전자같은 선천적인 영향보다도 후천적인 부분에 영향을 더 받는 것 같다는걸 느낄 수 있었다.&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;번역을 하고, 진짜 블로그를 관리하고.&lt;/h2&gt;

&lt;p&gt;내가 지금까지 블로그를 관리하는거는 글을 한번 쓰다가 블로그를 지우고 새로 만드는 것의 무한한 반복이었다. 이것은 의미없는 일이었기도 하지만, 꽤 좋은 글들도 날리기도 했다. (사실 브리즈번에서 토비님이나 오현석님을 만나게 됬던 계기도 내가 관리를 안하다가 날라간 블로그에 올렸던 글이다.) 올해 상반기는 정말 블로그를 만들어서 계속 꾸준히 쓰고 있다. Github에서 페이지를 서빙해주니까 유지 코스트가 들어가지 않아서 굉장히 좋은 것 같다.&lt;/p&gt;

&lt;p&gt;사실 블로그를 관리하면서 내 번역이나 글에 대해서 부족함을 많이 느끼는데, 그런 글도 잘 읽어주시는 분들에게 감사를 드리고 싶다. 사실 글재주 없는 공돌이로는 직접 계속 글을 쓰는게 도움이 되는 것 같고, 또 유시민의 글쓰기 특강이라는 책이 굉장히 인상적이었다. 아무튼 Qiita에서 좋은 글들을 보면 번역을 하고 싶은 생각이 들고, 그 생각을 생각에서 멈추지 않고 직접 트위터로 소통하고 번역할 수 있게 되었다.&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;프리랜서로 일하다가, 회사에 들어가고.&lt;/h2&gt;

&lt;p&gt;올해는 프리랜서로 일하는걸로 시작했다. 사실 쉬고 싶은 마음이 컸지만 사람이 사는데는 돈이 필요하니까 일을 할 수 밖에 없었다. 모 회사의 테스팅 플랫폼에 들어가는 탈옥 기반 iOS 리서치 과제라던가 모 서비스에서 영수증을 자동으로 인식하는 알고리즘 연구 등을 했었고 나중에는 안정적인 병원 치료를 위해 직장이 필요하다는걸 느끼고 회사에 들어가게 되었다.&lt;/p&gt;

&lt;p&gt;사실 이모콘에서도 이야기했지만 “내가 같이 일하고 싶은 사람”과 일하는게 중요하다는걸 고민하게 되었다. 프렌트립에 합류한건 딱 1개월 되었다. 일을 시작하기 2일 전에 회사에 가서 계약서에 도장을 찍을 때 소스코드 권한을 같이 받아서 소스를 리딩한게 어느 정도 이해하는데에 도움이 되었다.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;상반기에 한 것&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;생존에 대해서는 체중 감량 등에 대해서는 오히려 아쉬운 점이 많았지만, 생활 패턴을 되찾게 되고 졸피뎀을 끊었다. 나는 아직도 힘들고 만족스럽지는 않지만 병원에서는 그래도 90점 이상의, 빠른 치료 효과를 보이고 있다고 한다.&lt;/li&gt;
  &lt;li&gt;독서를 많이 했다. 아이패드를 통해 전자책에도 빠진 것 같다. 하반기에는 100권 가까이의 책을 읽을 수 있으면 좋겠다.&lt;/li&gt;
  &lt;li&gt;제대로 블로그를 관리하게 되었다. 재미있는 글들을 찾아 번역하는 재미를 느끼고, 뭔가 파고 싶은 것들이 있거나 아니면 생각을 정리할 때도 블로그는 유용한 것 같다.&lt;/li&gt;
  &lt;li&gt;프리랜서로 일하다가 프렌트립에 합류했고, 이번 상반기는 정말 같이 일하고 싶은 분들과 일할 수 있었던 것 같다. 열심히 그러면서도 재밌게 일하고 있어서 의미가 있는 것 같다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;하반기에 하고 싶은 것&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;우선 회사 일에 대한 욕심이 있는 것 같다. 제대로 된 안드로이드 앱을 고쳐서 내가 만든 서비스에서 나쁜 경험을 얻지 않게끔 하고 싶은 욕심이 있다.&lt;/li&gt;
  &lt;li&gt;트라우마에 대해 좀 편안하게 마주하고, 이인감이나 해리성 장애로 나의 정신을 해리시켜 도망치지 않고 싶다.&lt;/li&gt;
  &lt;li&gt;더 많은 좋은 글들을 번역하고 싶은 마음도 크고, 내 실력이 좀 더 늘어서 온전히 내가 좋은 글들을 쓸 수 있게 되었으면 좋겠다.&lt;/li&gt;
  &lt;li&gt;피 검사 등을 받아보면 모든 지표가 정상적이긴 한데, 체중과 체지방 양은 그래도 많고 높다. 개인 PT를 해서라도 좀 하반기엔 운동을 해봐야하지 않을까.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 02 Jul 2016 18:00:00 +0900</pubDate>
        <link>http://realignist.me/life/2016/07/02/half-report.html</link>
        <guid isPermaLink="true">http://realignist.me/life/2016/07/02/half-report.html</guid>
        
        <category>featured</category>
        
        <category>life</category>
        
        
        <category>life</category>
        
      </item>
    
      <item>
        <title>Kotlin 코드를 문서화하자. (for Android)</title>
        <description>&lt;p&gt;처음 내가 Kotlin을 접할 때만 하더라도 많은 사람들이 Kotlin의 존재를 모르고 있었다. 그리고 Kotlin을 이리저리 설파하려고 하는 나조차도 최근에서야 나도 실무에서 Kotlin을 제대로 쓸 수 있게 되었다. 다른 사람과 협업을 할 때, 문서화는 중요하다. 내가 문법이나 이런걸 프로젝트에 문서화해둘 수는 없어도 프로젝트 안 클래스나 메소드, 프로퍼티들이 어떤 역할을 하고 있는지는 남길 수 있다.&lt;/p&gt;

&lt;p&gt;그래서 오늘은 실전 안드로이드 프로젝트에서 어떻게 Kotlin 코드를 문서화할 수 있는지에 대해서 이야기해보고자 한다. 나는 안드로이드 프로젝트를 기준으로 설명하고 있지만, 기본적으로는 Gradle 기반의 프로젝트라면 이 글이 도움이 되리라 믿는다.&lt;/p&gt;

&lt;h2 id=&quot;kdoc--&quot;&gt;KDoc을 남기는 방법&lt;/h2&gt;

&lt;p&gt;KDoc은 Kotlin의 Javadoc같은 개념이라고 생각하면 된다. &lt;code&gt;/**&lt;/code&gt;로 시작해서 &lt;code&gt;*/&lt;/code&gt;로 끝이 난다. 여러 줄인데 매 줄마다 아스테리크 문자가 들어가는 형태이다. Kotlin 공식 문서가 제공하는 예시를 보자.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * A group of *members*.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * This class has no useful logic; it&amp;#39;s just a documentation example.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * &amp;lt;a href=&amp;#39;https://github.com/param&amp;#39; class=&amp;#39;user-mention&amp;#39;&amp;gt;@param&amp;lt;/a&amp;gt; T the type of a member in this group.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * &amp;lt;a href=&amp;#39;https://github.com/property&amp;#39; class=&amp;#39;user-mention&amp;#39;&amp;gt;@property&amp;lt;/a&amp;gt; name the name of this group.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * &amp;lt;a href=&amp;#39;https://github.com/constructor&amp;#39; class=&amp;#39;user-mention&amp;#39;&amp;gt;@constructor&amp;lt;/a&amp;gt; Creates an empty group.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * Adds a [member] to this group.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * &amp;lt;a href=&amp;#39;https://github.com/return&amp;#39; class=&amp;#39;user-mention&amp;#39;&amp;gt;@return&amp;lt;/a&amp;gt; the new size of the group.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;그리고 KDoc은 인라인 마크업에 대해서는 C#의 xml같은 형태가 아니라 마크다운 문법을 따라하고 있다. 그리고 약간 특이한 점은 요런 식으로의 클래스, 프로퍼티, 메소드의 링킹이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Use [this method][doSomething] for this purpose.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;블록 태그를 지원하며 이 부분은 Javadoc과 굉장히 유사한데, Kotlin에서는 다음과 같은 블록 태그를 지원한다. 그리고 &lt;code&gt;deprecated&lt;/code&gt; 태그가 먹히지 않기 때문에 이 부분은 &lt;code&gt;Deprecated&lt;/code&gt; 어노테이션을 달아줘야한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;param&lt;/li&gt;
  &lt;li&gt;return&lt;/li&gt;
  &lt;li&gt;constructor&lt;/li&gt;
  &lt;li&gt;property &lt;/li&gt;
  &lt;li&gt;throws, exception &lt;/li&gt;
  &lt;li&gt;sample&lt;/li&gt;
  &lt;li&gt;author&lt;/li&gt;
  &lt;li&gt;since&lt;/li&gt;
  &lt;li&gt;suppress&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;gradle-dokka-kotlin--export-&quot;&gt;Gradle에서 Dokka로 Kotlin 문서를 Export하는 방법&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;루트 프로젝트의 &lt;code&gt;build.gradle&lt;/code&gt;을 열어 다음과 같이 추가한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;jcenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;maven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;https://dl.bintray.com/kotlin/kotlin-eap&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;org.jetbrains.dokka:dokka-android-gradle-plugin:0.9.8&amp;quot;&lt;/span&gt;
	    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;앱 혹은 라이브러리 프로젝트의 &lt;code&gt;build.gradle&lt;/code&gt;을 다음과 같이 설정한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;org.jetbrains.dokka-android&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;afterEvaluate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;generateDebugAndroidTestSources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dependsOn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dokka&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dokka&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;moduleName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;...&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outputFormat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;html&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outputDirectory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$projectDir/docs&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;processConfigurations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;compile&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;linkMapping&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;src/main/kotlin&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://github.com/.../.../blob/master/app/src/main/kotlin&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;suffix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;#L&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sourceDirs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;src/main/kotlin&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Dokka의 상세한 정보는 &lt;a href=&quot;https://github.com/Kotlin/dokka&quot;&gt;GitHub&lt;/a&gt;에서 볼 수 있다. &lt;code&gt;afterEvaluate&lt;/code&gt;에, &lt;code&gt;generateDebugAndroidTestSources&lt;/code&gt;는 &lt;code&gt;dokka&lt;/code&gt;에 의존 관계를 갖는다고 명시했기 때문에 프로젝트를 빌드할 때 문서는 자동으로 생성될 것이다.&lt;/p&gt;

&lt;h2 id=&quot;stylesheet--&quot;&gt;커스텀 Stylesheet를 적용하는 방법&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;빌드가 끝나면 css와 html 파일이 나오는데 화면의 스타일시트를 수정하고 싶을 때는  Dokka의 소스를 열…뻔 했지만 생각해보니 생성이 끝나고 css 파일만 바꿔치기해주면 된다는 방법을 깨닫고 짜치게 구현해봤다. 앱이나 라이브러리 프로젝트의 &lt;code&gt;build.gradle&lt;/code&gt; 파일을 수정해보자.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;org.jetbrains.dokka-android&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;android&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;switchStylesheet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Copy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;overwrite:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Switching StyleSheet for Dokka&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;${projectDir}/dokka/&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;style.css&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;${projectDir}/docs/&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;afterEvaluate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;generateDebugAndroidTestSources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dependsOn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;switchStylesheet&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;switchStylesheet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dependsOn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dokka&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dokka&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{...}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;switchStylesheet&lt;/code&gt;라는 task를 만들었다. 얘는 &lt;code&gt;dock&lt;/code&gt; 태스크가 끝나면 실행되도록 의존성이 설정되어있고, 디버그 소스를 빌드할 때는 &lt;code&gt;switchStylesheet&lt;/code&gt;에 의존성을 걸어주면 자연스럽게 동작하게 된다.&lt;/li&gt;
  &lt;li&gt;프로젝트 디렉토리에 dokka 폴더를 만들고, 그 안에 css 파일을 넣으면 잘 동작할 것이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;profit&quot;&gt;Profit!&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/20160624/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 깔끔하게 문서가 나온다! 이렇게 나오는 문서를 보니 기분이 너무 조크든요… 개인적으로 클린한 코드를 짰을 때, 좋은 문서를 봤을 때, 문서화를 잘 했을 때 기분이 너무 좋다. 넘나 좋은 것.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/kotlin-doc.html&quot;&gt;https://kotlinlang.org/docs/reference/kotlin-doc.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Kotlin/dokka&quot;&gt;https://github.com/Kotlin/dokka&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 24 Jun 2016 19:30:00 +0900</pubDate>
        <link>http://realignist.me/code/2016/06/24/kotlin-documentation.html</link>
        <guid isPermaLink="true">http://realignist.me/code/2016/06/24/kotlin-documentation.html</guid>
        
        <category>android</category>
        
        <category>kotlin</category>
        
        <category>development</category>
        
        <category>documentation</category>
        
        <category>kdoc</category>
        
        <category>dokka</category>
        
        
        <category>code</category>
        
      </item>
    
      <item>
        <title>GDG Android Korea RxJava 스터디: 1회차</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;주제&lt;/h2&gt;

&lt;p&gt;```
1. Queue로써 Rx 활용
 - gdgand/android-rxjava&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Lambda 동작의 이해
http://www.slideshare.net/jaxlondon2012/lambda-a-peek-under-the-hood-brian-goetz (p.19 ~)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;내가 RxJava 를 쓰는 이유
https://speakerdeck.com/jakewharton/android-development-with-kotlin-androidkw-number-001 (p.11)
http://www.slideshare.net/jpaumard/java-8-stream-api-and-rxjava-comparison (p.213 ~)
```&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;queue-rx-&quot;&gt;1. Queue로 Rx 활용하기&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;푸쉬 메세지 예제
    &lt;ul&gt;
      &lt;li&gt;Device를 껐다가 켰을 때 오는 100개 정도의 알람을 해결할 때 사용함.&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;commandQueue&lt;/code&gt;라는 PublishSubject를 만들고, &lt;code&gt;onBackPressureBuffer&lt;/code&gt;를 이용함.&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;PublishSubject&lt;/code&gt;는 크기의 한계가 있기 때문에 &lt;code&gt;onBackPressureBuffer&lt;/code&gt;를 같이 쓰는게 좋음.&lt;/li&gt;
      &lt;li&gt;이렇게 RxJava로 Queue를 구현하면 Multi-thread의 동시성 문제, &lt;code&gt;synchronize&lt;/code&gt; 등등 수많은 작업을 짧게 할 수 있음.&lt;/li&gt;
      &lt;li&gt;PublishSubject를 Queue처럼 활용할 수 있음.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;RecyclerView의 Adapter에서 Observable 안에서 백그라운드 쓰레드로 처리함으로써 RecyclerView의 Frame 속도를 개선할 수 있음.
    &lt;ul&gt;
      &lt;li&gt;에러의 예외처리같은 경우에는 RxRelay의 &lt;code&gt;PublishRelay&lt;/code&gt;를 쓰면 onError가 호출된 뒤에도 다시 emit을 받을 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;EventBus인 Otto를 RxJava로 옮기는 예제에서 PubSub를 쓰고 있기 때문에 예제를 체크해볼 필요가 있음.&lt;/li&gt;
  &lt;li&gt;CompositeSubscription의 &lt;code&gt;unsubscribe&lt;/code&gt;와 &lt;code&gt;clear&lt;/code&gt;의 차이?
    &lt;ul&gt;
      &lt;li&gt;거의 비슷하지만 &lt;code&gt;unsubscribed&lt;/code&gt;가 true냐 아니냐의 차이.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;참고자료&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=QdmkXL7XikQ&quot;&gt;https://github.com/ReactiveX/RxJava/blob/master/src/main/java/rx/subscriptions/CompositeSubscription.java&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=QdmkXL7XikQ&quot;&gt;https://github.com/ReactiveX/RxJava/issues/2959&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=QdmkXL7XikQ&quot;&gt;https://www.youtube.com/watch?v=QdmkXL7XikQ&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=QdmkXL7XikQ&quot;&gt;https://speakerdeck.com/dlew/common-rxjava-mistakes&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;lambda-----3--rxjava--&quot;&gt;2. Lambda식이 내부에서 어떻게 동작하는가. &amp;amp; 3. 내가 RxJava를 쓰는 이유&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;람다식이 동작하는 원리를 알기 위해서는 Java 7과 8의 스펙을 이해해야함.&lt;/li&gt;
  &lt;li&gt;자바 컴파일러는 람다 표현식을 &lt;code&gt;invokedynamic&lt;/code&gt;으로 컴파일한다.&lt;/li&gt;
  &lt;li&gt;Java 7에서 &lt;code&gt;invokedynamic&lt;/code&gt;이라는 바이트코드가 폴리글랏을 지원하기 위해 새로 추가됨
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;invokedynamic&lt;/code&gt;의 인자는 Bootstrap Method에 대한 레퍼런스다. &lt;/li&gt;
      &lt;li&gt;Bootstrap Method는 &lt;code&gt;CallSite&lt;/code&gt; 인스턴스를 생성하며, 이 인스턴스는 런타임에 적합한 메소드를 실행하는 역할을 한다.&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;CallSite&lt;/code&gt; 인스턴스에는 &lt;code&gt;MethodHandle&lt;/code&gt;이 연결되어있고, 런타임에서 JVM에 의해 실행된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Android에서는 Java 8의 람다 표현식이나 Stream API를 쓸 수 없음. 람다 표현식을 쓰기 위한 방법은 바이트코드 레벨에서 백포팅해주는 Retrolambda를 이용할 수 있음.&lt;/li&gt;
  &lt;li&gt;Stream API를 쓰는데에는 RxJava나 LightweightStream, FunctionalJava 등이 있지만 승욱님이 당시에 알아봤을 때는 RxJava가 제일 잘 맞았기 때문에 이것을 쓰게 되었음.&lt;/li&gt;
  &lt;li&gt;물론 Stream API와 직접 비교를 하면 당연히 RxJava가 한참 느릴 수 밖에 없음.
    &lt;ul&gt;
      &lt;li&gt;특히 ParallelStream이 병렬적으로 처리를 하기 때문에 특히 더 빠르지만, 동시성 문제에 대해서 조심해서 사용해야함.&lt;/li&gt;
      &lt;li&gt;이 ParallelStream은 Java 7에 추가된 동시성 처리를 위한 Fork/Join을 이용해서 만들어짐.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;참고자료들&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24629247/where-does-official-documentation-say-that-javas-parallel-stream-operations-use&quot;&gt;https://docs.oracle.com/javase/7/docs/api/java/lang/invoke/MethodHandle.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24629247/where-does-official-documentation-say-that-javas-parallel-stream-operations-use&quot;&gt;https://slipp.net/wiki/pages/viewpage.action?pageId=19530380&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24629247/where-does-official-documentation-say-that-javas-parallel-stream-operations-use&quot;&gt;https://groups.google.com/forum/#!topic/ksug/wrFMOwFugwY&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24629247/where-does-official-documentation-say-that-javas-parallel-stream-operations-use&quot;&gt;https://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24629247/where-does-official-documentation-say-that-javas-parallel-stream-operations-use&quot;&gt;http://www.oracle.com/technetwork/articles/java/fork-join-422606.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24629247/where-does-official-documentation-say-that-javas-parallel-stream-operations-use&quot;&gt;https://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/24629247/where-does-official-documentation-say-that-javas-parallel-stream-operations-use&quot;&gt;http://stackoverflow.com/questions/24629247/where-does-official-documentation-say-that-javas-parallel-stream-operations-use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;후기&lt;/h2&gt;

&lt;p&gt;이번과 같이 Java의 언어 기능의 동작 원리를 알기 위해서는 언어 표준과 바이트코드까지에 대한 지식이 필요한데 개인적으로는 이렇게 깊게까지 공부해본 적이 없었기 때문에 좀 더 공부가 필요하다는 것을 많이 느꼈습니다. 개인적으로 Java 7에서 추가된 기능들이 그렇게 크지 않다고 생각했는데, 람다식과 병렬 스트림을 위해서 필요한 개념들은 Java 7에 추가되었다는 것을 보고 반성하게 되었습니다. &lt;/p&gt;
</description>
        <pubDate>Thu, 09 Jun 2016 10:00:00 +0900</pubDate>
        <link>http://realignist.me/code/2016/06/09/rxjava-study-1.html</link>
        <guid isPermaLink="true">http://realignist.me/code/2016/06/09/rxjava-study-1.html</guid>
        
        <category>android</category>
        
        <category>rxjava</category>
        
        <category>development</category>
        
        <category>observable</category>
        
        
        <category>code</category>
        
      </item>
    
      <item>
        <title>[번역] 쓰기 시작하면 멈출 수 없어지는 Swift Extension 모음</title>
        <description>&lt;p&gt;이 글은 tattn님이 Qiita에 올린 &lt;a href=&quot;http://qiita.com/tattn/items/647e094936287a6bd2d3&quot;&gt;글&lt;/a&gt;을 한국어로 번역한 글입니다. 번역을 허락해주신 tattn님께 감사합니다. Swift를 쓰면서 생산성을 높여주는 짤막한 코드들이 인상적입니다. 혹시 어떤 부분이 제일 인상적이었는지 댓글로 남겨주셔도 좋을 것 같습니다.&lt;/p&gt;

&lt;p&gt;범용성 높은 Extension 집입니다. 후반에 있는 라이브러리도 정리했습니다. Swift 2.2 기준으로 확인되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;클래스 이름의 표시&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;dynamicType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &amp;quot;MyClass&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &amp;quot;MyClass&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;xib--&quot;&gt;XIB를 등록하고 호출하기&lt;/h2&gt;

&lt;p&gt;XIB 파일과 클래스 이름을 똑같이 설정한 뒤 이용해주세요. 위에서 이야기한 “클래스 이름의 표시”를 활용하고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;uitableview&quot;&gt;UITableView&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UITableView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registerCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UITableViewCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UINib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;nibName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;registerNib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;forCellReuseIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registerCells&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UITableViewCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registerCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dequeueCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UITableViewCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dequeueReusableCellWithIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;forIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registerCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registerCells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCell1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyCell2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dequeueCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;uicollectionview&quot;&gt;UICollectionView&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UICollectionView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registerCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UICollectionViewCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UINib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;nibName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;registerNib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;forCellWithReuseIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registerCells&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UICollectionViewCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registerCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registerReusableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UICollectionReusableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UICollectionElementKindSectionHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UINib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;nibName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;registerNib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;forSupplementaryViewOfKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;withReuseIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registerReusableViews&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UICollectionReusableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UICollectionElementKindSectionHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registerReusableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dequeueCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UICollectionViewCell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;forIndexPath&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dequeueReusableCellWithReuseIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;forIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dequeueReusableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UICollectionReusableView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UICollectionElementKindSectionHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dequeueReusableSupplementaryViewOfKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;withReuseIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;forIndexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registerCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registerCells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCell1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyCell2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dequeueCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registerReusableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyReusableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;registerReusableViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyReusableView1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyReusableView2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collectionView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dequeueReusableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyReusableView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;nscolor-&quot;&gt;16진수를 이용해서 NSColor 만들기&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;convenience&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFF0000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;255.0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x00FF00&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;255.0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x0000FF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;255.0&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xAABBCC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;uiviewcontroller--&quot;&gt;제일 최상위 UIViewController 객체를 가져오기&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIApplication&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootViewController&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;presentedViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;presentedViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;topViewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;presentedViewController&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topViewController&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;bp&quot;&gt;UIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sharedApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;storyboard-viewcontroller-&quot;&gt;Storyboard의 ViewController 생성하기&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StoryBoardHelper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StoryBoardHelper&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storyboard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIStoryboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instantiateViewControllerWithIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Self&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;storyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storyboard&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIStoryboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instantiateViewControllerWithIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Self&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StoryBoardHelper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Storyboard 파일과 클래스 이름이 같을 때&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MyViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Storyboard 파일과 클래스 이름이 다를 때&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;MyViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;MyStoryboard&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;위에서 이야기한 “클래스 이름의 표시”를 활용하고 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;xib-view-&quot;&gt;XIB의 View를 생성&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NibHelper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NibHelper&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nib&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UINib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;nibName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instantiateWithOwner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Self&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;UIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NibHelper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;MyView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instantiate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;owner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;XIB 파일과 클래스 이름을 똑같이 설정한 뒤 이용해주세요. 위에서 이야기한 “클래스 이름의 표시”를 활용하고 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;view-&quot;&gt;모든 자식 View를 죽이기&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;removeAllSubviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subview&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;subview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;removeFromSuperview&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;removeAllSubViews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;selector-&quot;&gt;Selector를 모으기&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Selector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buttonTapped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttonTapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttonTapped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;forControlEvents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TouchUpInside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-1&quot;&gt;라이브러리&lt;/h2&gt;
&lt;p&gt;개발을 쉽게 해주는 다용도 extension 계의 라이브러리를 정리했습니다.&lt;/p&gt;

&lt;h3 id=&quot;swiftdatehttpsgithubcommalcommacswiftdate&quot;&gt;&lt;a href=&quot;https://github.com/malcommac/SwiftDate&quot;&gt;SwiftDate&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;NSDate를 쉽게 쓸 수  있게 만들어주는 라이브러리&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;day&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;hour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;2016-01-05T22:10:55.200Z&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ISO8601&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;22/01/2016&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateFormat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Custom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dd/MM/yyyy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hours&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;15.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;minutes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fromNow&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;years&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;months&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;days&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hours&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;더 자세히 알고 싶으신 분들은 &lt;a href=&quot;https://github.com/malcommac/SwiftDate/blob/master/Documentation/UserGuide.md&quot;&gt;여기&lt;/a&gt;에서.&lt;/p&gt;

&lt;h3 id=&quot;chameleonhttpsgithubcomviccalexanderchameleon&quot;&gt;&lt;a href=&quot;https://github.com/ViccAlexander/Chameleon&quot;&gt;Chameleon&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160605/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;좋은 느낌의 플랫 컬러를 제공해주는 라이브러리&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flatGreenColorDark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FlatGreenDark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 위의 축약형&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RandomFlatColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ComplementaryFlatColorOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 보색&lt;/span&gt;

&lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pinkColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flatten&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FlatGreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexValue&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &amp;quot;2ecc71&amp;quot;&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;UIColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;averageColorFromImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;컨트롤의 색을 일괄적으로 변경하는 것도 가능합니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;Chameleon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setGlobalThemeUsingPrimaryColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlatBlue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;withSecondaryColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FlatMagenta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;andContentStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIContentStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Contrast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;rswifthttpsgithubcommac-cain13rswift&quot;&gt;&lt;a href=&quot;https://github.com/mac-cain13/R.swift&quot;&gt;R.swift&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;안드로이드의 R.java와 같이 파일 이름 등을 프로퍼티화해주는 라이브러리입니다. Typo가 컴파일 시점에 알 수 있으니 행복해집니다.&lt;/p&gt;

&lt;p&gt;Before&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;icon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;named&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;settings-icon&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIFont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;San Francisco&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;nibName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;CustomView&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;welcome.withName&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSLocale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentLocale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Arthur Dent&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;icon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settingsIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sanFrancisco&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;nib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localizable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;welcomeWithName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Arthur Dent&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;swiftstringhttpsgithubcomamayneswiftstring&quot;&gt;&lt;a href=&quot;https://github.com/amayne/SwiftString&quot;&gt;SwiftString&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;String에 편리한 메소드를 추가해주는 라이브러리입니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;foobar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; true&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &amp;quot;1,2,3&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &amp;quot;world&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; &amp;quot;he&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;hi hi ho hey hihey&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;swiftyuserdefaultshttpsgithubcomradexswiftyuserdefaults&quot;&gt;&lt;a href=&quot;https://github.com/radex/SwiftyUserDefaults&quot;&gt;SwiftyUserDefaults&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;NSUserDefaults를 Swift스럽게 쓰게 해주는 라이브러리입니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultsKeys&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;launchCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefaultsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;launchCount&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 값을 가져오거나 설정하기&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hotkeyEnabled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 값의 변경&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;launchCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;… can easily be extended!&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 배열의 작업&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libraries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SwiftyUserDefaults&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libraries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; 2.0&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 커스텀 타입도 OK&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;whiteColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Defaults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;whiteComponent&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; 1.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;textattributeshttpsgithubcomdelbatextattributes&quot;&gt;&lt;a href=&quot;https://github.com/delba/TextAttributes&quot;&gt;TextAttributes&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160605/2.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;NSAttributedString를 쉽게 설정할 수 있는 라이브러리입니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TextAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;HelveticaNeue&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foregroundColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lineHeightMultiple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;bp&quot;&gt;NSAttributedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ほげ&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;asynchttpsgithubcomduemunkasync&quot;&gt;&lt;a href=&quot;https://github.com/duemunk/Async&quot;&gt;Async&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Grand Central Dispatch (GCD)를 쉽게 쓰게 해주는 라이브러리입니다.&lt;/p&gt;

&lt;p&gt;Before&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatch_get_global_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DISPATCH_QUEUE_PRIORITY_BACKGROUND&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;This is run on the background queue&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;This is run on the main queue, after the previous block&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;Async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;background&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;This is run on the background queue&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;This is run on the main queue, after the previous block&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;asynckithttpsgithubcommishimayasynckit&quot;&gt;&lt;a href=&quot;https://github.com/mishimay/AsyncKit&quot;&gt;AsyncKit&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/mishimay/items/7df447969a1c38d856d8&quot;&gt;http://qiita.com/mishimay/items/7df447969a1c38d856d8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;여러 비동기 처리를 끝낸 뒤 다음 작업을 할 수 있게 도와주는 라이브러리입니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsyncKit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parallel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;one&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;two&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//=&amp;gt; Success([&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 05 Jun 2016 12:00:00 +0900</pubDate>
        <link>http://realignist.me/code/2016/06/05/swift-snippets.html</link>
        <guid isPermaLink="true">http://realignist.me/code/2016/06/05/swift-snippets.html</guid>
        
        <category>ios</category>
        
        <category>swift</category>
        
        <category>development</category>
        
        <category>async</category>
        
        <category>color</category>
        
        <category>string</category>
        
        
        <category>code</category>
        
      </item>
    
      <item>
        <title>Samsung Portable SSD T3 짧은 리뷰</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;사게 된 계기?&lt;/h2&gt;
&lt;p&gt;프렌트립에 입사하면서 쓰게 된 장비가 iMac 4K인데, RAM도 16GB로 넉넉한 편이었지만 딱 하나 크리티컬하게 부족했던건 내장 공간이 HDD라서 빌드나 여러 작업을 할 때 느리다는 문제가 있었다. ‘그래서 외장 SSD를 내장처럼 쓰고 부팅 디스크로 쓰면 어떨까?’라는 생각이 들었고, 회사에 지원 요청을 해서 출근 첫 날 같이 셋팅할 수 있게 되었다. 개인적으로는 매일 페이스북에서 질풍기획과 같이 콜라보하던 광고가 보였는데, 매일 광고로만 보던 외장 SSD를 내가 실제로 쓰게 될 줄은 몰랐다.&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;구성&lt;/h2&gt;

&lt;p&gt;박스를 열어보니 아래 사진과 같이 SSD와 케이스가 도착을 했다. SSD에 가죽 케이스를 끼워야 하나 싶기도 한데, 메탈 바디와 가격이 외장하드보다 훨씬 비싸다는 것을 생각하면 충분히 납득이 될 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160601/1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우선 T3부터 살펴보자. 맥과 윈도우 모두 사용할 수 있고, 심지어는 안드로이드에서도 사용할 수 있다고 적혀있다. 내가 산 모델은 250GB 모델인데, 1TB 하드디스크와 같이 사용할걸 생각하면 꽤 괜찮은 용량이라고 생각한다. 물론 많으면 많을수록 좋지만…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160601/2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;포장을 벗기고 T3을 한 손으로 쥐어보았다. 한 손으로 잡히는 이 매우 작고 가벼운 외장 SSD는 확실히 외장 하드디스크보다 충분히 매력적이라고 생각한다. 윗면에 연결 단자는 USB 3.1 Type-C 형태를 쓰고 있고, 케이블로는 기존 USB(Type-A)와 연결하는 케이블을 준다. 가죽 파우치는 매우 심플하게 생겨서 뭔가 더 설명이 필요가 없을 것 같다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160601/5.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160601/4.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;그럼 한번 실제로 써보자.&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160601/6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;일단 나는 데이터를 마이그레이션하기 위해 내 맥북에 외장 SSD를 연결했고, 내가 기존에 쓰던 맥북의 PCIe SSD의 파티션을 그대로 덤프했다. 덤프에 걸리는 시간은 약 7분 정도였다. 그리고 아이맥에 그대로 꽂으니 부팅이 정상적으로 작동한다. 기기의 ID가 달라졌기 때문에 상용 프로그램들은 다시 한번 인증을 해야했다.&lt;/p&gt;

&lt;p&gt;과연 그러면 실제 측정 속도는 얼마나 될까? 맥에서 많이 쓰이는 Blackmagic Disk Speed Test를 통해 측정해보았다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160601/benchmark.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;읽기 속도 427MB/s, 쓰기 속도 303.9MB/s. PCIe나 NVMe m.2.같이 신형 SSD만큼 속도가 빠른건 아니지만 USB를 사용하는 TLC SSD로는 매우 만족스러운 속도가 나온다고 생각한다. 실제로 프로젝트를 빌드하거나 할 때 속도가 느리다는 생각이 들지 않게 되었다. 개인적으로는 삼성이 Thunderbolt를 이용한 전문가용 고속 외장 SSD도 만들면 어떨까라고 생각해본다.&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;결론&lt;/h2&gt;

&lt;p&gt;충분히 매력적인 크기와 무게, 속도까지 겸비했다. 내장 드라이브처럼 써도 괜찮을지는 좀 더 지켜보고 이야기할 수 있겠지만, 아직까지는 매우 만족스럽다. 그리고 회사에서 장비를 잘 지원해줘서 좋다. 아직 백엔드 개발자를 뽑고 있으니… 관심 있으신 분들은 언제든지 연락 주세요! (참고로 안드로이드는 제가 하고 있습니다.)&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ko&quot;&gt;&lt;p lang=&quot;ko&quot; dir=&quot;ltr&quot;&gt;♚♚안드로이드♚♚ §§백엔드§§ ♜개발자♜를 뽑.습.니.다. §§입사시§§전원 맥북레티나☜☜ 100% 증정※ @@최대1억원@@의 $연봉$ 즉시이동 &amp;gt;&amp;gt;&amp;gt; &lt;a href=&quot;https://t.co/S0ndG6T6XF&quot;&gt;https://t.co/S0ndG6T6XF&lt;/a&gt; &amp;lt;&amp;lt;&amp;lt;&lt;/p&gt;&amp;mdash; Wanbok Choi (&lt;a href=&quot;https://github.com/wanbok&quot; class=&quot;user-mention&quot;&gt;@wanbok&lt;/a&gt;) &lt;a href=&quot;https://twitter.com/wanbok/status/734747658422607872&quot;&gt;2016년 5월 23일&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Thu, 02 Jun 2016 11:50:00 +0900</pubDate>
        <link>http://realignist.me/gadget/2016/06/02/samsung-t3-short-review.html</link>
        <guid isPermaLink="true">http://realignist.me/gadget/2016/06/02/samsung-t3-short-review.html</guid>
        
        <category>Portable</category>
        
        <category>SSD</category>
        
        <category>T3</category>
        
        <category>Samsung</category>
        
        <category>frientrip</category>
        
        
        <category>gadget</category>
        
      </item>
    
      <item>
        <title>[번역] RxJava를 3일만에 입문해서, 안드로이드 애플리케이션의 리스트 작업이나 비동기 처리와 알림을 해결한 이야기.</title>
        <description>&lt;p&gt;이번 글도 &lt;a href=&quot;http://twitter.com/yuya_presto&quot;&gt;@yuya_presto&lt;/a&gt;님이 쓰신 &lt;a href=&quot;http://qiita.com/yuya_presto/items/152fa80d073d865cfc90&quot;&gt;글&lt;/a&gt;을 한국어로 번역한 글입니다. 일부 오역이나 의역이 있을 수 있으며 이 부분에 대해서 양해를 부탁드리며 댓글로의 지적도 환영합니다, 좋은 글을 한국어로도 번역할 수 있게 해주신 yuya_presto님께 감사하다는 말씀 드립니다.&lt;/p&gt;

&lt;p&gt;Java 8과 RxJava를 최대한 활용해서 이렇게 사용할 수 있다라는걸 보여주는 좋은 예제 글인 것 같습니다. &lt;strong&gt;글을 읽으시고 나서 하단의 Recommend나 댓글, SNS로의 공유는 힘이 됩니다! 원작자에 대한 감사 댓글도 달아주신다면 일본어로 번역해서 전달해드릴 수 있도록 하겠습니다.&lt;/strong&gt; Rx쪽 시리즈 글들은 시간이 나는대로 허락을 받아서 번역할 수 있도록 하겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;왜 이런 글을 썼는가?&lt;/h2&gt;

&lt;p&gt;지금 개발 중인 프로젝트에서 RxJava를 도입했기 때문에, 실제로 사용한 예와 찾아보지 않으면 알 수 없는 것들을 올려뒀습니다.&lt;/p&gt;

&lt;p&gt;그렇게 도입(RetroLambda를 위해 JDK8도 도입)했었을 때의 장점을 이야기해도 샘플 코드가 없으면 알 수 없다는 이야기를 들어왔기 때문에 실제로 무엇이 해결되었는지, 어떤 코드로 해결했는지와 그것을 위해 공부해야만 했던 점들에 대해서 써봤습니다.&lt;/p&gt;

&lt;p&gt;(+1) 경고: 만들어둔 코드에서는 해결되었습니다만, 아직 릴리즈 단계는 아니기 때문에 그 점에 충분히 유의해주세요. 변경 사항이 있으면 다시 이야기하겠습니다.&lt;/p&gt;

&lt;p&gt;(+2) 릴리즈한 뒤 안정적으로 운용하고 있습니다. 최근까지 모니터링에 어려움이 있었지만 그 부분도 수정했습니다. 이 기사에 대한 모니터링 스니펫 코드도 추가해뒀습니다.&lt;/p&gt;

&lt;h2 id=&quot;rxjava-&quot;&gt;왜 RxJava를 도입했는가?&lt;/h2&gt;

&lt;p&gt;다음 문제들을 모두 해결해줄 수 있는게 RxJava라고 생각했고 리팩토링도 할 겸 같이 도입하게 되었습니다. (기세로 밀어붙여 죄송합니다…)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;팀 내에서 안드로이드의 비동기 처리나 그 외 에러 핸들링을 처리하는게 귀찮다는 이야기가 계속 전부터 나오고 있었습니다.&lt;/li&gt;
  &lt;li&gt;리스트 작업이나 람다식을 쓰는게 소스 코드의 가독성이 높은 것 같았습니다.&lt;/li&gt;
  &lt;li&gt;리팩토링을 통해 데이터 소스가 변경되었을 때, 화면의 갱신을 이벤트로 처리하도록 방침을 바꿨습니다.&lt;/li&gt;
  &lt;li&gt;Cookpad에서는 처음부터 리스트 작업부터 도입했다는 것 같습니다. (&lt;a href=&quot;http://techlife.cookpad.com/entry/2015/04/17/100000&quot;&gt;Android 개발에서 RxJava를 팀에 도입한 이야기&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그러나 당초 리스트 조작이나 Loader 완료 후의 상태 변경의 전달에만 사용하기로 했습니다만, &lt;a href=&quot;http://qiita.com/ainame&quot;&gt;&lt;a href=&quot;https://github.com/ainame&quot; class=&quot;user-mention&quot;&gt;@ainame&lt;/a&gt;&lt;/a&gt;님이 “이런 코드라면 장점이 잘 와닿지 않는다.”라는 말을 듣고 Loader와 EventBus로 구현된 부분들을 전부 RxJava로 바꾸게 되었습니다.&lt;/p&gt;

&lt;h2 id=&quot;rxjava--1&quot;&gt;RxJava의 기본&lt;/h2&gt;

&lt;p&gt;Reactive Programming의 개념에 대해서는 참고용 글을 쓰는데 그쳤고, 이번 글에서는 실제 사용 예에 대해서 다뤄보도록 하겠습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;개념이나 익숙해지는 방법에 대해서라면 이 슬라이드를 보는게 알기 쉽습니다. (&lt;a href=&quot;https://speakerdeck.com/sys1yagi/rxjavaxue-xi-falsehesutohurakuteisutuhoimofalse&quot;&gt;RxJava 학습의 베스트 프랙티스같은 것들&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ninjinkun.hatenablog.com/entry/introrxja&quot;&gt;(번역) 당신이 원하고 있던 리액티브 프로그래밍 입문&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://reactivex.io/intro.html&quot;&gt;ReactiveX의 Intro 페이지&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;※ 여담입니다만, 본인은 하스켈이나 논문을 읽어본 적이 없기 때문에 Functional Reactive Programming이라는 개념에 대해서는 잘 알지 못합니다. 이 점 양해해주세요.&lt;/p&gt;

&lt;p&gt;공통적인 사용법만 아래에 적어뒀습니다. 코드 샘플은 후술하도록 하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160529/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://reactivex.io/documentation/observable.html&quot;&gt;Observable&lt;/a&gt;부터 Item이 동기식으로나 비동기식으로 내려옵니다. (스트림)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Observable.from(List)&lt;/code&gt;를 사용하면, List 안에 있는 객체가 하나씩 스트림으로 내려오는 Observable를 만드는 것이 가능합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;map()&lt;/code&gt;이나 &lt;code&gt;filter()&lt;/code&gt;를 시작으로 하는 &lt;a href=&quot;http://reactivex.io/documentation/operators.html&quot;&gt;Operator&lt;/a&gt;를 사용하면 스트림으로 내려오는 Item을 수정할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;동기적으로 결과를 얻고 싶을 때에는 &lt;code&gt;toBlocking()&lt;/code&gt;을 사용합니다.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;observeOn()&lt;/code&gt;에 &lt;a href=&quot;http://reactivex.io/documentation/scheduler.html&quot;&gt;Scheduler&lt;/a&gt;를 설정해두면 &lt;code&gt;subscribe()&lt;/code&gt;의 콜백을 설정해둔 스레드(메인스레드 등…)에서 호출하는 것이 가능합니다.&lt;/li&gt;
  &lt;li&gt;취소하고 싶을 때에는 &lt;code&gt;unsubscribe()&lt;/code&gt;를 실행합니다. (다만, 적절히 구현된 Observable에만 Activity나 Fragment가 메모리 누수를 일으키지 않습니다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;메인 문서는 RxJava의 Repository에서 제공하는 Wiki를 보는 것이 좋을 것 같습니다. 작동의 확인은 &lt;a href=&quot;http://rxmarbles.com&quot;&gt;http://rxmarbles.com&lt;/a&gt;이 아마 제일 편리할겁니다. 다만 RxJS로 작성되어있기 때문에, 이름이 다른 메소드 등이 존재할 수 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;rxjava--2&quot;&gt;현재의 과제와 RxJava로의 해결책&lt;/h2&gt;

&lt;p&gt;(군데군데 &lt;code&gt;arg -&amp;gt; process()&lt;/code&gt;라던가 &lt;code&gt;Class::method&lt;/code&gt;같은 표현이 나옵니다만, 이것은 Java 8에서 쓰이는 람다 표현식이기 때문에 RetroLambda를 설정하지 않은 분들은 적절한 Callback을 선언해주세요.)&lt;/p&gt;

&lt;h3 id=&quot;for-&quot;&gt;리스트 처리가 아직도 for문으로 처리된다?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;(+1) RxJava는 단순히 루프로 돌아가고 있는게 아니기 때문에, &lt;code&gt;zip()&lt;/code&gt; 등의 일부 메소드의 처리 속도가 느린 것 같습니다. 리스트 작업을 편리하게 하기 위해서는 Java 8의 Stream API의 백포팅 라이브러리인 &lt;a href=&quot;https://github.com/aNNiMON/Lightweight-Stream-API&quot;&gt;Lightweight-Stream-API&lt;/a&gt;를 추천합니다. 메소드 수는 350여가지입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Java 8부터 Lambda 식이나 Stream API를 사용해서 &lt;code&gt;map()&lt;/code&gt;이나 &lt;code&gt;filter()&lt;/code&gt;와 같은 Ruby, Python, Underscore.js / ECMAScript5와 비슷한 for loop를 사용하지 않은 리스트 처리가 가능해졌습니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Java 7&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherUserNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selfUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;otherUserNames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Java 8&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherUserNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selfUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;User:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// user -&amp;gt; user.getName()의 단순 표현, method references라고 부릅니다.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Collectors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;new나 add 같은 절차적인 코드가 사라지고 리스트에 대한 가공만 코드에 나타나서 읽기가 쉽다! 하지만 Android에서 Java 8을 쓸 수 있는건 꽤 먼 이야기가 될 것 같습니다. &lt;em&gt;(역주 : Android N Preview부터는 Jack Toolchain을 이용하여 Java 8의 기능들을 사용할 수 있습니다.)&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;rxjava--3&quot;&gt;그거 RxJava로 되는데요…&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// RxJava&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherUserNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selfUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;User:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toBlocking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 전부 리스트로 묶어서, 동기 처리할 수 있도록 설정하고, 하나로 결과를 합칩니다.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;비동기 처리를 전제로 하고 있기 때문에, 동기 처리로 바꾸기 위해서는 &lt;code&gt;toBlocking()&lt;/code&gt;을 계속 호출하는게 버릇처럼 되곘지만 그 부분만 해결한다면 충분히 실용적일 것이라고 생각합니다.&lt;/p&gt;

&lt;p&gt;サンプルはこの記事にいくつか載っています：Java 8: No more loopsをRxJavaでやる(Androidの環境で)&lt;/p&gt;

&lt;p&gt;샘플 코드는 이 글에 몇가지 들어있습니다. (&lt;a href=&quot;http://sys1yagi.hatenablog.com/entry/2015/01/14/141710&quot;&gt;Java 8: No More loops를 안드로이드 환경에서 RxJava로 해보자.&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;비동기 (백그라운드) 처리가 귀찮은 문제&lt;/h3&gt;

&lt;p&gt;안드로이드의 프레임워크에서 백그라운드 처리를 실행하기 위해 사용하는 패턴은 주로 아래에 있는 세가지입니다. 하지만, 각자의 단점이 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://developer.android.com/reference/android/os/AsyncTask.html&quot;&gt;AsyncTask&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;실행 중에 Activity, Fragment가 Destroy되면, 특별히 노력하지 않는 한 메모리 누수가 일어나거나 크래쉬가 일어난다.&lt;/li&gt;
      &lt;li&gt;특별히 cancel할 때의 처리가 어렵다.&lt;/li&gt;
      &lt;li&gt;에러를 핸들링하는 부분이 귀찮다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://developer.android.com/reference/android/content/AsyncTaskLoader.html&quot;&gt;AsyncTaskLoader&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;올바르게 구현하기 위한 Boilerplate가 매우 어렵다. (전에 코드를 읽을 때는 링크 출처의 공식 샘플도 잘못 구현한 것 같았다.)&lt;/li&gt;
      &lt;li&gt;destroy나 화면 회전이 일어날 떄, Activity나 Fragment가 비활성화될 때 등 조건에 따라 동작이 복잡해진다.&lt;/li&gt;
      &lt;li&gt;Activity나 Fragment에서밖에 쓸 수 없다.&lt;/li&gt;
      &lt;li&gt;파라미터로 Bundle밖에 줄 수 없다. (그 의도는 알겠지만 마음에 들지는 않는다.)&lt;/li&gt;
      &lt;li&gt;에러를 핸들링하는 부분이 귀찮다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://techbooster.jpn.org/andriod/application/1570/&quot;&gt;IntentService&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;결과를 반환하는 방법이 이벤트(EventBus나 LocalBroadcast)로 한정된다.&lt;/li&gt;
      &lt;li&gt;만들 때마다 AndroidManifest에서의 추가가 필요하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;rxjava--4&quot;&gt;그거, RxJava로 되는데요…&lt;/h4&gt;

&lt;p&gt;해결책으로 Promise를 도입하는 방법이 있습니다. RxJava의 Observable는 Promise처럼 사용할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;observable&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;observeOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AndroidSchedulers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mainThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;예를 들면 REST Client 라이브러리인 Retrofit은 RxJava에 대응하고 있어서, Observable를 반환하는 것이 가능합니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;https:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//github.com/GET&amp;#39; class=&amp;#39;user-mention&amp;#39;&amp;gt;@GET&amp;lt;/a&amp;gt;(&amp;quot;/users&amp;quot;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUsers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;https:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//github.com/GET&amp;#39; class=&amp;#39;user-mention&amp;#39;&amp;gt;@GET&amp;lt;/a&amp;gt;(&amp;quot;/users&amp;quot;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Retrofit의 경우 처음부터 백그라운드 스레드에서 처리됩니다.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;이것을 이용한 실제 구현 예는 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserListFragment&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fragment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subscription&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mSubscription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mSubscription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;observeOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AndroidSchedulers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mainThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 결과의 통지는 UI Thread에서 실행됩니다.&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;                                &lt;span class=&quot;c1&quot;&gt;// subscribe의 타이밍에 처리가 시작되어 Callback에 결과가 보내집니다.&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;                          &lt;span class=&quot;c1&quot;&gt;// 결과를 render 메소드에 전달합니다.&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;showErrorAlert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// 에러가 발생할 때의 예외 처리를 지정해줍니다.（optional）&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;showCompletedAlert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// 정상적으로 처리가 끝났을 때의 처리를 지정해줍니다. (optional)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ※ mainThread()는 RxAndroid의 구현을 참조할 것.&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// View가 사라지기 전에 처리가 끝나지 않았어도 unsubscript를 통해 취소하고, callback으로 넘어가지 않도록 합니다.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// (Observable이 바르게 구현되어 있다면) 참조가 사라지면 Activity나 Fragment가 메모리 누수를 일으키지 않습니다.&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 어느 라이프사이클에서 subscribe나 unsubscribe할지 베스트 케이스가 정해지지 않았습니다. (역주: 있으면 공유를 부탁드립니다...)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mSubscription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unsubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;이처럼 AsyncTask나 AsyncTaskLoader, IntentService를 새로 만들지 않고도 메모리 누수 없이 심플하게 코드를 작성할 수 있습니다…! 이번에는 화면 회전을 할 때 특별히 캐시를 지정하지는 않도록 결론 지은 구현입니다만, 가능하면 그 근처에서도 try해보려고 합니다.&lt;/p&gt;

&lt;p&gt;※ Promise와 Observable의 큰 차이점은 여러 값을 반환할 수 있는가입니다.&lt;/p&gt;

&lt;p&gt;한편, 이번에 직접 만든 &lt;code&gt;AndroidSchedulers.mainThread()&lt;/code&gt;는 RxAndroid에서 만든 것을 이용하지 않고 제가 다시 구현한 것을 사용하고 있습니다. RxAndroid을 사용하지 않은 이유는 후술합니다.&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;변경 알림 흐름을 쫓기 어려워진 문제&lt;/h3&gt;

&lt;p&gt;표시할 때마다 Fragment에서 Model을 호출하는 장소에서 변경 알림 이벤트에 의한 View의 갱신을 가하면 호출의 흐름이 복잡하게 되어버립니다. 또 이것을 EventBus를 통해서 구현하면 그 이벤트가 어디서 날아오는지 명확히 알 수 없다는 문제도 존재합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160529/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이것을 Observer 패턴을 이용하면 변경 내용이 통지될 때마다 render하는 것만으로도 괜찮아지며, 또 subscribe할 때에 Model를 참조하기 때문에 가독성이 높아집니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160529/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;rxjava--&quot;&gt;그거 RxJava로… (이하 생략)&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;(+1) 원래의 구현은 타이밍에 따라 최신 상태를 받을 수 없게 되어버리는 문제와 &lt;code&gt;onBackpressureLatest()&lt;/code&gt;가 제대로 동작하지 않았었기 때문에 &lt;code&gt;replay(1)&lt;/code&gt;를 사용하여 다시 작성되었습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 통지가 올 때마다 Request를 날리기 위한 Observable을 만듭니다.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PublishSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mUpdateNotificationPublisher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PublishSubject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mUserUpdateObservable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mUpdateNotificationPublisher&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onBackpressureLatest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// 뒤에서 처리할 수 있는 것보다 많이 오게 된다면 최근에 하나만 큐잉하고 나머지를 버립니다.&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aVoid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// 값이 날아 오면 Request를 던지는 Observable을 돌려 준다. flatMap은 반환된 Observable를 subscribe()한 뒤에 연결합니다. maxConcurrent를 1로 설정하게 되면 동시에 1개의 리퀘스트만 설정할 수 있게 됩니다.&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;replay&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;refCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;// 여러번 subscribe되어도 1개의 결과를 전체에 배포합니다. replay(1)는 subscribe()되었을 때 최신인 하나의 onNext()를 통과합니다. refCount()는 누군가 한명이라도 subscribe()하고 있을 때 상류의 처리를 담당합니다.&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// ※ publish()혹은 replay() 없이는 subscribe()한 횟수만큼 (낭비) 병렬로 Request를 날려 버립니다. 여러 번 달리는 이유는 Hot / Cold Observable의 개념에서 설명하겠습니다.&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;notifyUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mUpdateNotificationPublisher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;observeUsers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// 몇번 호출되더라도 같은 Hot Observable를 subscribe() 합니다.&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mUserUpdateObservable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserListFragment&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fragment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Subscription&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mSubscription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mUserModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mSubscription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mUserModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;observeUsers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;observeOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AndroidSchedulers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mainThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 결과의 통지는 UI Thread에서 실행됩니다.&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;                   &lt;span class=&quot;c1&quot;&gt;// subscribe로 감시와 초기의 Request가 시작되며, 변경이 있을 때마다 render 메소드가 호출되게 됩니다.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mSubscription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unsubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Fragment쪽에 특별히 복잡한 처리 코드를 적지 않고서도 Reactive한 느낌이 넘치는, 변경이 마음대로 반영되는 구현이 완성되었습니다…!&lt;/p&gt;

&lt;p&gt;※ 여담입니다만, 누구라도 post할 수 있는 이벤트라면 EventBus를 쓰는 것이 낫고 특정한 상대에게 이벤트를 보여주고 싶을 때에는 Observable를 쓰는 제안을 받은 적이 있습니다.&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;도입하고 싶어졌다면?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxJava/releases&quot;&gt;RxJava&lt;/a&gt;: 본체
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;build.gradle&lt;/code&gt;에 &lt;code&gt;compile &#39;io.reactivex:rxjava:x.xx.xx&#39;&lt;/code&gt; 최신 버전은 위의 링크에서 확인해주세요.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/evant/gradle-retrolambda&quot;&gt;retrolambda&lt;/a&gt;: Lambda식
    &lt;ul&gt;
      &lt;li&gt;안드로이드에서도 람다식을 쓸 수 있게 됩니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxJavaDebug&quot;&gt;RxJavaDebug&lt;/a&gt;: 디버그용
    &lt;ul&gt;
      &lt;li&gt;결국 사용하지 않게 됩니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-4&quot;&gt;나름대로 알아보지 않으면 잘 몰랐던 것들&lt;/h2&gt;

&lt;p&gt;우선은 구현 예를 적어봤습니다만, 리스트 작업 이외에는 이해해야할 것들이 점점 많아집니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;리스트 작업 : 스트림 처리, Operator, &lt;code&gt;toBlocking()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;비동기 처리 : 리스트 처리 + &lt;code&gt;subscribe()&lt;/code&gt; + &lt;code&gt;unsubscribe()&lt;/code&gt;, Scheduler, (필요에 따라서) Observable의 자작 방법&lt;/li&gt;
  &lt;li&gt;변경 통지 : 비동기 처리 + Subject + 가능하면 Backpressure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 이후는 솔직히 처음부터 이해하려고 하면 힘든 영역이라고 생각되기 때문에, 간단한 리스트 처리부터 시작하는 편이 좋다고 생각합니다. 비동기 처리를 해보겠어…! 라고 생각한다면 다음 순서대로 해보세요.&lt;/p&gt;

&lt;h3 id=&quot;unsubscribe-------rxandroid----&quot;&gt;&lt;code&gt;unsubscribe()&lt;/code&gt;하는 것이 귀찮다. ~~한편 그것을 어떻게 하는 RxAndroid는 지금 사용할 수 없다~~.&lt;/h3&gt;

&lt;p&gt;(+1) &lt;a href=&quot;https://github.com/trello/RxLifecycle&quot;&gt;RxLifecycle&lt;/a&gt;가 원래의 RxAndroid의 unsubscribe에 가깝습니다만, 위에서 쓴 것처럼 onStart()만으로도 충분했다고 생각하기 때문에 쓰고 있지 않습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(+2) subscribe/unsbuscribe 라이프 사이클에 관련해서는 별도의 Qiita 글 (&lt;a href=&quot;http://qiita.com/yuya_presto/items/c8c3d77ac958c9c8f67b&quot;&gt;RxJava의 자세한 설명&lt;/a&gt;)에 지금의 견해를 적었습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;subscribe()&lt;/code&gt;에서 반환되는 Subscription을 &lt;code&gt;unsubscribe()&lt;/code&gt; 하지 않으면 AsyncTask처럼 작업이 완료될 떄까지 Activity나 Fragment가 메모리에서 누수되어 버립니다.(일단 &lt;code&gt;onComplete()&lt;/code&gt; 또는 &lt;code&gt;onError()&lt;/code&gt;시 자동으로 &lt;code&gt;unsubscribe()&lt;/code&gt; 됩니다.) 원래는 RxAndroid에서 대응할 수 있을 것이라고 생각했습니다만, 너무 커지기 때문에 불편해질 것이라는 &lt;a href=&quot;https://github.com/ReactiveX/RxAndroid/issues/172&quot;&gt;Jake Wharton의 의견&lt;/a&gt;대로 지금은 그다지 사용되고 있지 않는 것 같습니다.&lt;/p&gt;

&lt;p&gt;학습 코스트를 줄이기 위해도 겸해 &lt;code&gt;onCreate()&lt;/code&gt; 등의 메소드에 &lt;code&gt;subscribe()&lt;/code&gt;와 &lt;code&gt;unsubscribe()&lt;/code&gt;를 직접 추가하기로 했습니다. Subscription 관리를 간단하게 하기 위해서는 &lt;code&gt;CompositeSubscription&lt;/code&gt;에 &lt;code&gt;add()&lt;/code&gt;한 뒤, 나중에 모아서 한꺼번에 &lt;code&gt;unsubscribe()&lt;/code&gt;합니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserListFragment&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fragment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompositeSubscription&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mCompositeSubscription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mCompositeSubscription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CompositeSubscription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Subscription&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;observeOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AndroidSchedulers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mainThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mCompositeSubscription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mCompositeSubscription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unsubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;업데이트 작업을 수행하는 경우 등 &lt;code&gt;subscribe()&lt;/code&gt;를 여러 번 호출하는 경우가 있다고 생각 합니다만, 이 경우 작업이 완료될 때마다 매번 CompositeSubscription에서 &lt;code&gt;remove()&lt;/code&gt;하지 않으면 점점 늘어나버립니다. 따라서 &lt;code&gt;subscribe()&lt;/code&gt;와 &lt;code&gt;unsubscribe()&lt;/code&gt; (혹은 종료)시에 마음대로 &lt;code&gt;CompositeObservable&lt;/code&gt;의 &lt;code&gt;add()&lt;/code&gt;와 &lt;code&gt;remove()&lt;/code&gt;를 호출할 수 있는 구조를 만들었습니다. (&lt;a href=&quot;https://gist.github.com/ypresto/accec4409654a1830f54&quot;&gt;Gist&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;(+1) 이것은 반드시 &lt;code&gt;subscribe()&lt;/code&gt;의 맨 마지막에 호출하지 않으면 잘 unsubscribe되지 않는 경우가 있으므로 주의가 필요합니다.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;mClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;observeOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AndroidSchedulers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mainThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompositeObservables&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;attachTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mCompositeObservable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// lift는 커스텀 Operator를 사용하기 위해서 쓰는 것입니다.&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;※ CompositeSubscription는 한 번 unsubscribe하면 다시 사용할 수 없기 때문에 주의하세요. &lt;code&gt;attachTo()&lt;/code&gt;는 &lt;code&gt;mCompositeObservable&lt;/code&gt;을 만들고 때마다 다시 호출해야합니다. &lt;a href=&quot;http://gfx.hatenablog.com/entry/2015/06/08/091656&quot;&gt;http://gfx.hatenablog.com/entry/2015/06/08/091656&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;subscribeon-observeon-scheduler---&quot;&gt;&lt;code&gt;subscribeOn()&lt;/code&gt;, &lt;code&gt;observeOn()&lt;/code&gt;과 Scheduler 스레드 전환과 범위&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;(+1) 이 글을 썼을 때보다 Rx에 대한 이해가 깊어졌기 때문에 의사코드와 설명을 다른 Qiita 글(&lt;a href=&quot;http://qiita.com/yuya_presto/items/c8c3d77ac958c9c8f67b&quot;&gt;RxJava의 자세한 설명&lt;/a&gt;)에 썼습니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;먼저 이해하는데 시간이 꽤 걸린 부분 중 하나입니다만, 실행 스레드를 전환하기 위해서 Scheduler를 사용합니다. Scheduler를 사용하면 스트림의 실행(&lt;code&gt;onNext()&lt;/code&gt;, &lt;code&gt;onComplete()&lt;/code&gt;, &lt;code&gt;onError()&lt;/code&gt; 등의 호출) 스레드를 변경할 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;subscribeOn()&lt;/code&gt;: &lt;code&gt;subscribe()&lt;/code&gt;에서 실행되는 모든 스레드&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;observeOn()&lt;/code&gt;: 호출한 이후의 스트림을 다른 스레드에서 실행&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;subscribeOn()&lt;/code&gt;은 느린 메소드를를 &lt;code&gt;map()&lt;/code&gt;과 사용자가 정의한 Observable에서 호출할 때 지정해야합니다. &lt;a href=&quot;https://groups.google.com/d/msg/rxjava/XXJJPhn8PHQ/BJhBUNHnwtgJ&quot;&gt;그러나 가장 소스에 가까운 &lt;code&gt;subscribeOn()&lt;/code&gt;만 유효&lt;/a&gt;합니다. 여러번 호출하면 스레드가 생성되는만큼 낭비라는 것. 또한 Retrofit같은 경우 &lt;a href=&quot;https://github.com/square/retrofit/issues/830#issuecomment-98441589&quot;&gt;처음부터 실행되는 스레드가 정해져 있는&lt;/a&gt; 것 같아서 효과가 없는 것 같습니다. &lt;code&gt;observeOn()&lt;/code&gt;은 View의 업데이트는 메인 스레드에서만 호출할 수 있기 때문에 비동기 요청을 했을 경우에는 &lt;code&gt;subscribe()&lt;/code&gt; 직전에 반드시 호출해야 합니다. RxAndroid의 1.0은 AndroidSchedulers의 구현만을 포함하는 라이브러리도 존재하기 때문에 이를 사용하는 것이 좋습니다.&lt;/p&gt;

&lt;p&gt;또한 문서화되지 않는 한 &lt;code&gt;subscribeOn()&lt;/code&gt;의 지정이 없으면 &lt;code&gt;subscribe()&lt;/code&gt; 스레드에서 실행됩니다.&lt;/p&gt;

&lt;p&gt;※ Observable을 반환할 수 있는 &lt;code&gt;flatMap()&lt;/code&gt;을 사용한 경우가 까다롭긴 하지만, 반환된 Observable에서 &lt;code&gt;subscribeOn()&lt;/code&gt;을 호출하고 있는 경우 &lt;code&gt;onNext()&lt;/code&gt;를 호출한 Observable에 대응하는 스레드에서 계속 처리되는 것 같습니다. &lt;a href=&quot;https://groups.google.com/d/msg/rxjava/hVFl4YCORDQ/F-KorYBmpV0J&quot;&gt;https://groups.google.com/d/msg/rxjava/hVFl4YCORDQ/F-KorYBmpV0J&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;observable--&quot;&gt;동기적 메소드를 Observable로 만드는 방법&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;(+1) 아래의 구현를 이용하면 특히 느린 처리에서 subscriber가 누출하여 결과 Activity 등이 같이 메모리에서 누출되어 버립니다. 자세한 내용은 다른 Qiita 글로 쓸 예정입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;가장 간단한 방법을 하면 다음과 같이 됩니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OnSubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;https:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//github.com/Override&amp;#39; class=&amp;#39;user-mention&amp;#39;&amp;gt;@Override&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;subscriber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;입니다만, 사실은 처리가 끝날 떄까지 subscriber(Activity나 Fragment 속의 Inner Class나 Lambda식 혹은 그것을 랩핑한 객체)에 대한 참조가 유지되기 때문에 AsyncTask와 마찬가지로 메모리 누수가 발생합니다. AbstractOnSubscribe를 사용하면 처음부터 &lt;code&gt;unsubscribe()&lt;/code&gt;에 의한 취소 등을 지원하는게 가능해집니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 주의: AbstractOnSubscribe는 아직 Experimental 단계입니다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AbstractOnSubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Action1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AbstractOnSubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SubscriptionState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;https:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//github.com/Override&amp;#39; class=&amp;#39;user-mention&amp;#39;&amp;gt;@Override&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AbstractOnSubscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SubscriptionState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MediaFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subscriptionState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;subscriptionState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;subscriptionState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCompleted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribeOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Schedulers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;※ [rxjava-async-util](https://github.com/ReactiveX/RxJava/wiki/를 사용하면 &lt;code&gt;AsyncObservable.start()&lt;/code&gt;를 사용하는 것도 가능합니다만, 값이 캐싱되거나 하는 일이 있기 때문에 이번엔 사용하지 않았습니다.&lt;/p&gt;

&lt;h3 id=&quot;hot--cold-observable--connectable-observable--&quot;&gt;Hot / Cold Observable 개념과 Connectable Observable이 어려운 문제&lt;/h3&gt;

&lt;p&gt;또 한가지 어려웠던 것 중 하나가 Hot과 Cold라는 개념이 있었던 것입니다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mObservable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heavyMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mObservable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mObservable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mObservable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;처음에는 &lt;code&gt;heavyMethod()&lt;/code&gt;의 호출은 한번으로 끝난다고 생각해버렸습니다. 그러나 Observable은 비동기적이며 mObsercable에는 어떠한 결과도 캐싱되지 않고 &lt;code&gt;heavyMethod()&lt;/code&gt;는 3회 호출되게 됩니다. 변경 알림을 구현하는 예에서 &lt;code&gt;share()&lt;/code&gt;(&lt;code&gt;publish().refCount()&lt;/code&gt;와 같음)의 호출을 하고 있었던 것은 분기의 뿌리에 처리 결과를 공유하기 때문입니다. 이처럼 분기의 뿌리가 되는 특별한 것을 Hot Observable이라고 하고, 그 이외의 일반적인 것들을 Cold Observable이라고 부릅니다. 이 부분은 &lt;a href=&quot;http://qiita.com/toRisouP/items/f6088963037bfda658d3&quot;&gt;“Rx의 Hot과 Cold에 대해”&lt;/a&gt;라는 글에서 자세히 설명하고 있습니다.&lt;/p&gt;

&lt;p&gt;Connectable Observable은 subscribe되면 즉시 작동이 시작해서 Hot Observable을 모두에게 &lt;code&gt;subscribe()&lt;/code&gt;가 끝날 때까지 지연시키는 구조로, &lt;code&gt;refCount()&lt;/code&gt;를 사용하면 누군가가 &lt;code&gt;subscribe()&lt;/code&gt;하고 있을 때만 시작되는게 됩니다. 다음과 같은 경우가 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;publish()&lt;/code&gt;: &lt;code&gt;subscribe()&lt;/code&gt;하기에 앞서 이후에 도착한 것들을 내려보낸다. (Multicast）&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;replay()&lt;/code&gt;: &lt;code&gt;subscribe()&lt;/code&gt;할 때마다 지금까지 도착한 item들을 전부 다시 전달합니다. (최근의 n건만 전달하는 것도 가능.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;또한 Hot Observable이 시작되면 &lt;strong&gt;그 직전까지의 스트림을 대표하여 &lt;code&gt;subscribe()&lt;/code&gt; 하고있는 상태&lt;/strong&gt;가 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;observable----subject-&quot;&gt;Observable에 직접 값을 내리는 Subject를 사용하기&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Observable.from(List)&lt;/code&gt;를 쓰면 먼저 결정한 값 밖에 스트림에 내릴 수 있습니다. 나중에 값을 바꿔서 내리고 싶다면 Subject를 사용해 &lt;code&gt;onNext()&lt;/code&gt;을 부릅니다. Subject는 Observable이자 Callback(Subscriber)이기도 합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PublishSubject
    &lt;ul&gt;
      &lt;li&gt;PublishSubject의 &lt;code&gt;onNext()&lt;/code&gt;를 호출할 때 &lt;code&gt;subscribe()&lt;/code&gt; 콜백에 동일한 값을 전달합니다.&lt;/li&gt;
      &lt;li&gt;통지(이벤트)의 구현에 편리합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;BehaviorSubject
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;subscribe()&lt;/code&gt;시 마지막에 &lt;code&gt;onNext()&lt;/code&gt;된 값을 내리며, 이후 &lt;code&gt;onNext()&lt;/code&gt;될 때마다 값을 내립니다.&lt;/li&gt;
      &lt;li&gt;변경이 일어날 때 값을 표현하는 데 유용합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;backpressure-&quot;&gt;Backpressure 개념&lt;/h3&gt;

&lt;p&gt;(+1) Backpressure의 구조에 대해서는 &lt;a href=&quot;http://qiita.com/yuya_presto/items/0e95271bc85efe7f768e&quot;&gt;다른 글&lt;/a&gt;를 썼습니다. 이쪽도 함께 부탁드립니다.&lt;/p&gt;

&lt;p&gt;Backpressure에 대해서는 아직 공부 중입니다. ReactiveX의 intro에 나와 있는 바와 같이 Iterable는 pull(&lt;code&gt;next()&lt;/code&gt;에서 따온), Observable은 push(&lt;code&gt;onNext()&lt;/code&gt;에서 건너오는)입니다. push의 경우 자신이 pull하는 경우에 비해 연속 처리가 늦어질 때의 제어가 어려워집니다. 이를 제어하기 위해 얼마만큼의 &lt;code&gt;onNext()&lt;/code&gt;가 연속으로 호출되어도 괜찮은지 소스 쪽에 전달하는 구조입니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxJava/wiki/Backpressure&quot;&gt;https://github.com/ReactiveX/RxJava/wiki/Backpressure&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;UI로 문자의 입력에 따라 처리를 호출하는 경우 등에 도움이 될 것입니다만, 그런 경우에는 일정 시간 내에 이벤트 수를 제어하는 Operator를 사용해보라고 적혀 있습니다.&lt;/p&gt;
</description>
        <pubDate>Sun, 29 May 2016 16:55:00 +0900</pubDate>
        <link>http://realignist.me/code/2016/05/29/rxjava-on-android.html</link>
        <guid isPermaLink="true">http://realignist.me/code/2016/05/29/rxjava-on-android.html</guid>
        
        <category>android</category>
        
        <category>rxjava</category>
        
        <category>development</category>
        
        <category>observable</category>
        
        
        <category>code</category>
        
      </item>
    
      <item>
        <title>[번역] ButterKnife, 지금까지 고마웠어. Data Binding, 앞으로 잘 부탁해.</title>
        <description>&lt;p&gt;이 글은 &lt;a href=&quot;https://github.com/izumin5210&quot; class=&quot;user-mention&quot;&gt;@izumin5210&lt;/a&gt;님이 Qiita에 올린 &lt;a href=&quot;http://qiita.com/izumin5210/items/2784576d86ce6b9b51e6&quot;&gt;글&lt;/a&gt;을 번역한 글입니다. 일부 오역이나 의역이 있을 수 있으며 이 부분에 대해서 양해를 부탁드리며, 좋은 글을 한국어로도 번역할 수 있게 해주신 izumin5210님께 감사하다는 말씀 드립니다.&lt;/p&gt;

&lt;h2 id=&quot;butterknife--&quot;&gt;ButterKnife, 지금까지 고마웠어.&lt;/h2&gt;

&lt;p&gt;어떤 어플리케이션의 master 브랜치에 &lt;a href=&quot;http://jakewharton.github.io/butterknife/&quot;&gt;ButterKnife&lt;/a&gt;로 되어있던 부분을 없애는 Pull Request를 머지했다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160525/5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;지금까지 ButterKnife가 하고 있던 일은 전부 &lt;a href=&quot;http://developer.android.com/tools/data-binding/guide.html&quot;&gt;Data Binding&lt;/a&gt;이 대신 하게 되었다. Data Binding은 공식에서는 아직 beta release 단계에 있는 상태로, &lt;a href=&quot;https://bintray.com/android/android-tools&quot;&gt;거의 1.0에 가까운 RC(Release Candidate) 수준&lt;/a&gt;까지 되었기 때문에 실전에 투입할 수 있게 되었다.&lt;/p&gt;

&lt;p&gt;실행할 때에 Reflection을 하는 ButterKnife와는 달리 Data Binding은 Annotation Processing으로 사전에 이것저것 해주는 방식이 좋았다. (c.f. ButterKnife도 Annotation Processing을 하는 방식으로 바뀌는 것 같다. -&amp;gt; &lt;a href=&quot;https://github.com/JakeWharton/butterknife/pull/323&quot;&gt;Split the compiler and runtime into separate artifacts. by serj-lotutovici · Pull Request #323 · JakeWharton/butterknife&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;“Data Binding으로 ButterKnife를 대체할 수 있다!”라고 말하는 사람들은 많지만 실제 사례를 별로 본 적이 없는 것 같아서 여기에 소개해두도록 하겠다.&lt;/p&gt;

&lt;h2 id=&quot;yet-another-butterknife-data-binding&quot;&gt;Yet Another ButterKnife로의 Data Binding&lt;/h2&gt;

&lt;h3 id=&quot;view-binding&quot;&gt;View Binding&lt;/h3&gt;

&lt;h4 id=&quot;before&quot;&gt;Before&lt;/h4&gt;

&lt;p&gt;아마 모두들 ButterKnife에서 제일 원하고 있는 기능, &lt;code&gt;findViewById(int id)&lt;/code&gt;가 필요 없어지는 다음과 같은 코드&lt;/p&gt;

&lt;p&gt;```java
class ExampleActivity extends Activity {
  &lt;a href=&quot;https://github.com/Bind&quot; class=&quot;user-mention&quot;&gt;@Bind&lt;/a&gt;(R.id.title) TextView title;
  &lt;a href=&quot;https://github.com/Bind&quot; class=&quot;user-mention&quot;&gt;@Bind&lt;/a&gt;(R.id.subtitle) TextView subtitle;
  &lt;a href=&quot;https://github.com/Bind&quot; class=&quot;user-mention&quot;&gt;@Bind&lt;/a&gt;(R.id.footer) TextView footer;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Override&quot; class=&quot;user-mention&quot;&gt;@Override&lt;/a&gt;
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.simple_activity);
    ButterKnife.bind(this);
  }
}
```&lt;/p&gt;

&lt;p&gt;이 부분은 전부 Data Binding으로 다음과 같이 바꿔서 사용할 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;after&quot;&gt;After&lt;/h4&gt;

&lt;p&gt;레이아웃 전체를 &lt;code&gt;&amp;lt;layout&amp;gt;&amp;lt;/layout&amp;gt;&lt;/code&gt;으로 감싸준다.&lt;/p&gt;

&lt;p&gt;```xml&lt;/p&gt;
&lt;layout&gt;
  &lt;linearlayout&gt;
    &lt;textview android:id=&quot;@+id/title&quot;&gt;
    &lt;textview android:id=&quot;@+id/subtitle&quot;&gt;
    &lt;textview android:id=&quot;@+id/footer&quot;&gt;
  

```

이렇게 하면 `activity_sample.xml` 파일이라고 한다면 `ActivitySampleBinding`이라는 클래스가 생성된다.`DataBindingUtils.setContentView(Activity activity, int id)`를 통해 Binding 인스턴스를 반환하기 때문에 이 인스턴스를 유지해두면 좋다.

```java
class ExampleActivity extends Activity {
  private ActivitySampleBinding binding;

  &lt;a href=&quot;https://github.com/Override&quot; class=&quot;user-mention&quot;&gt;@Override&lt;/a&gt;
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    binding = DataBindingUtils.setContentView(this, R.layout.simple_activity);
  }
}
```

이 Binding 인스턴스가 id로 설정된 각 View의 인스턴스를 가지고 있는걸 확인할 수 있다.

```java
String text = binding.footer.getText();
```

### Non-Activity Binding

#### Before

Activity 뿐만이 아니라, 예를 들면 Fragment에서의 View Binding.

```java
public class FancyFragment extends Fragment {
  &lt;a href=&quot;https://github.com/Bind&quot; class=&quot;user-mention&quot;&gt;@Bind&lt;/a&gt;(R.id.button1) Button button1;
  &lt;a href=&quot;https://github.com/Bind&quot; class=&quot;user-mention&quot;&gt;@Bind&lt;/a&gt;(R.id.button2) Button button2;

  &lt;a href=&quot;https://github.com/Override&quot; class=&quot;user-mention&quot;&gt;@Override&lt;/a&gt;
  public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
    View view = inflater.inflate(R.layout.fancy_fragment, container, false);
    ButterKnife.bind(this, view);
    // TODO Use fields...
    return view;
  }
}
```

#### After

생성된 Binding 클래스에 `bind(View view)`라는 정적 메소드가 존재하기 때문에, 그것을 이용하면 된다. 그 다음은 같다.

```java

public class FancyFragment extends Fragment {
  private FragmentFancyBinding binding;

  &lt;a href=&quot;https://github.com/Override&quot; class=&quot;user-mention&quot;&gt;@Override&lt;/a&gt;
  public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
    return inflater.inflate(R.layout.fragment_fancy, container, false);
  }

  &lt;a href=&quot;https://github.com/Override&quot; class=&quot;user-mention&quot;&gt;@Override&lt;/a&gt;
  public void onActivityCreated(Bundle savedInstanceState) {
    super.onActivityCreated(savedInstanceState);
    binding = FragmentFancyBinding.bind(getView());
  }
}
```

### View Binding (ViewHolder)

#### Before

ButterKnife를 이용하면 `ListView`를 위한 `ViewHolder`의 구현을 쉽게 할 수 있다.

```java
public class MyAdapter extends BaseAdapter {
  &lt;a href=&quot;https://github.com/Override&quot; class=&quot;user-mention&quot;&gt;@Override&lt;/a&gt;
  public View getView(int position, View view, ViewGroup parent) {
    ViewHolder holder;
    if (view != null) {
      holder = (ViewHolder) view.getTag();
    } else {
      view = inflater.inflate(R.layout.list_item_sample, parent, false);
      holder = new ViewHolder(view);
      view.setTag(holder);
    }

    holder.name.setText(&quot;John Doe&quot;);
    // etc...

    return view;
  }

  static class ViewHolder {
    &lt;a href=&quot;https://github.com/Bind&quot; class=&quot;user-mention&quot;&gt;@Bind&lt;/a&gt;(R.id.title) TextView name;
    &lt;a href=&quot;https://github.com/Bind&quot; class=&quot;user-mention&quot;&gt;@Bind&lt;/a&gt;(R.id.job_title) TextView jobTitle;

    public ViewHolder(View view) {
      ButterKnife.bind(this, view);
    }
  }
}
```

#### After (ListView)

Data Binding을 이용하면 Binding 클래스가 ViewHolder와 같은 방식으로 작동하므로, 원래 `ViewHolder`가 필요 없어진다. (`RecyclerView`에 대해서는 조금 다른 이야기가 되기 때문에 후술하도록 하겠다.) Data Binding을 이용하고 있으면 setter 또한 구현 되어있기 때문에 각 View에 값을 일일히 줄 필요도 없다. (Snippet 안에 있는 주석을 참조하라.)

```java
public class MyAdapter extends BaseAdapter {
  &lt;a href=&quot;https://github.com/Override&quot; class=&quot;user-mention&quot;&gt;@Override&lt;/a&gt;
  public View getView(int position, View convertView, ViewGroup parent) {
      ListItemSampleBinding binding;
      if (convertView == null) {
          binding = DataBindingUtil.inflate(inflater, R.layout.list_item_sample, parent, false);
          convertView = binding.getRoot();
          convertView.setTag(binding);
      } else {
          binding = (ListItemSampleBinding) convertView.getTag();
      }

			// 예를 들면 User의 리스트라면 항목 별로 지정하는게 아니라 User의 인스턴스를 바로 지정할 수 있다.
    
      binding.setUser(getItem(position));
      // binding.name.setText(&quot;John Doe&quot;);

      return convertView;
  }
}
```

#### After (RecyclerView)

`RecyclerView`같은 경우에는 `RecyclerView.ViewHolder`가 필수가 된다. 이 ViewHolder에 BindingHolder같은 이름을 붙이고 Binding 클래스와 연결해주도록 하면 된다.

```java
public class SampleRecyclerAdapter extends RecyclerView.Adapter&lt;samplerecycleradapter.bindingholder&gt; {

    &lt;a href=&quot;https://github.com/Override&quot; class=&quot;user-mention&quot;&gt;@Override&lt;/a&gt;
    public RegisterableDeviceListAdapter.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
      final View v = LayoutInflater.from(parent.getContext()).inflate(R.layout.list_item_sample, parent, false);
      return new BindingHolder(v);
    }

  &lt;a href=&quot;https://github.com/Override&quot; class=&quot;user-mention&quot;&gt;@Override&lt;/a&gt;
  public void onBindViewHolder(BindingHolder holder, int position) {
    // BindingHolder#getBinding()がViewDataBindingを返すのでsetVariable()を呼んでいる
    // 専用のBinding（この場合だとListItemSampleBinding）を返すことが出来るなら普通にsetUser()でOK
    holder.getBinding().setVariable(BR.user, getItem(position));
  }

  static class BindingHolder extends RecyclerView.ViewHolder {
    private final ViewDataBinding binding;

    public BindingHolder(View itemView) {
      super(itemView);
      binding = DataBindingUtil.bind(itemView)
    }

    public ViewDataBinding getBinding() {
      return binding;
    }
  }
}
```

### Listener Binding (onClick)

#### Before

`&lt;a href=&quot;https://github.com/OnClick&quot; class=&quot;user-mention&quot;&gt;@OnClick&lt;/a&gt;`이나 `&lt;a href=&quot;https://github.com/OnItemClick&quot; class=&quot;user-mention&quot;&gt;@OnItemClick&lt;/a&gt;` 등의 어노테이션을 사용하는걸 통해 `setOnClickListener()`를 지정해주는 것과 비슷한 것을 할 수 있습니다.

```java
&lt;a href=&quot;https://github.com/OnClick&quot; class=&quot;user-mention&quot;&gt;@OnClick&lt;/a&gt;(R.id.submit)
public void submit(View view) {
  // TODO submit data to server...
}
```

#### After

레이아웃에 Activity의 인스턴스를 지정해주고, `Button`의 `android:onClick` 항목에 Listener 메소드를 지정해준다.

```xml
&lt;layout&gt;
  &lt;data&gt;
    &lt;variable name=&quot;activity&quot; type=&quot;info.izumin.android.databindingsample.SampleActivity&quot; /&gt;
  &lt;/data&gt;
  &lt;linearlayout&gt;
    &lt;button android:onclick=&quot;@{activity.onSampleButtonClick}&quot;&gt;
  

```

Activity의 `onCreate()`에서는 Binding 인스턴스에 Activity의 인스턴스를 지정해주면 그 이후에는 편하게 사용할 수 있다.

```java
class SampleActivity extends Activity {
  private ActivitySampleBinding binding;

  &lt;a href=&quot;https://github.com/Override&quot; class=&quot;user-mention&quot;&gt;@Override&lt;/a&gt;
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    binding = DataBindingUtils.setContentView(this, R.layout.simple_activity);
    binding.setActivity(this);
  }

  public void onSampleButtonClick(View view) {
    // do something...
  }
}
```

다만, 앞의 예제의 Activity는 Layout를 참고하고 있으며 Layout은 Activity를 참조하고 있는 것처럼 완전히 서로 결합되는 구조가 된다. 이것이 싫다면 이벤트 처리만을 담당하는 Interface를 만들어주면 좋다. 이제 느슨하게 서로 연결되는 구조가 실현된다.

```java
interface SampleActivityHandlers {
  void onSampleButtonClick(View view);
}
```

[Clean Architecture](http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html)에서 이야기하는 Controller에 해당될려나?

### 그 외 Data Binding의 편리한 기능들

#### Listener Bindings

Data Binding은 `&lt;a href=&quot;https://github.com/BindingAdapter&quot; class=&quot;user-mention&quot;&gt;@BindingAdapter&lt;/a&gt;`나 `&lt;a href=&quot;https://github.com/BindingMethod&quot; class=&quot;user-mention&quot;&gt;@BindingMethod&lt;/a&gt;`라고 하는 어노테이션을 이용한 어노테이션 프로세싱을 통해 `OnClickListener` 이외의 Event Listener도 설정할 수 있다.

```xml
&lt;button android:onclick=&quot;@{handlers.onPrevButtonClick}&quot; /&gt;
&lt;button android:onclick=&quot;@{handlers.onNextButtonClick}&quot; /&gt;
&lt;edittext android:ontextchanged=&quot;@{handlers.onTextChanged}&quot; /&gt;
&lt;listview android:onscroll=&quot;@{handlers.onScroll}&quot; /&gt;
```

```java
interface SampleActivityHandlers {
  void onPrevButtonClick(View view);
  void onNextButtonClick(View view);
  void onTextChanged(CharSequence s, int start, int before, int count);
  void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount);
}
```

표준으로 제공하는 Adapter에 대해서는 [extensions/baseAdapters/.../data-binding/](https://android.googlesource.com/platform/frameworks/data-binding/+/android-6.0.0_r7/extensions/baseAdapters/src/main/java/android/databinding/adapters)에 있는 파일을 참조하길 바란다.

#### Adapter Binding

`&lt;a href=&quot;https://github.com/BindingAdapter&quot; class=&quot;user-mention&quot;&gt;@BindingAdapter&lt;/a&gt;` 및 `&lt;a href=&quot;https://github.com/BindingMethod&quot; class=&quot;user-mention&quot;&gt;@BindingMethod&lt;/a&gt;`의 악용 사례

```java
&lt;a href=&quot;https://github.com/BindingMethods&quot; class=&quot;user-mention&quot;&gt;@BindingMethods&lt;/a&gt;({
    &lt;a href=&quot;https://github.com/BindingMethod&quot; class=&quot;user-mention&quot;&gt;@BindingMethod&lt;/a&gt;(type = SwipeRefreshLayout.class, attribute = &quot;android:onRefresh&quot;, method = &quot;setOnRefreshListener&quot;),
    &lt;a href=&quot;https://github.com/BindingMethod&quot; class=&quot;user-mention&quot;&gt;@BindingMethod&lt;/a&gt;(type = RecyclerView.class, attribute = &quot;android:adapter&quot;, method = &quot;setAdapter&quot;)
})
public final class ViewBindingUtils {
}
```

```java
public interface SampleActivityHandlers {
  void onRefresh();
}
```

```xml
&lt;layout&gt;
  &lt;data&gt;
    &lt;variable name=&quot;handlers&quot; type=&quot;info.izumin.android.databindingsample.SampleActivityHandlers&quot; /&gt;
    &lt;variable name=&quot;adapter&quot; type=&quot;android.support.v7.widget.RecyclerView.Adapter&quot; /&gt;
  &lt;/data&gt;
  &lt;android.support.v4.widget.swiperefreshlayout android:onrefresh=&quot;@{handlers.onRefresh}&quot;&gt;

    &lt;android.support.v7.widget.recyclerview android:adapter=&quot;@{adapter}&quot; /&gt;

  &lt;/android.support.v4.widget.swiperefreshlayout&gt;
&lt;/layout&gt;
```

이렇게까지 해야할 필요성이 있는지 모르겠다.

#### Image Source Binding

&quot;어떤 값에 따라 표시하는 이미지를 바꿀 수 없을까?&quot;같은 것도 `BindingAdapter`를 이용하면 쉽게 할 수 있다. 정적 메소드이기 때문에 테스트도 편하게 할 수 있지 않을까?

```java
public final class ViewBindingUtils {
  &lt;a href=&quot;https://github.com/BindingAdapter&quot; class=&quot;user-mention&quot;&gt;@BindingAdapter&lt;/a&gt;(&quot;signalStrength&quot;)
  public static void setSignalStrengthIcon(ImageView imageView, BluetoothDevice device) {
    int resId = R.mipmap.ic_signal_weak;
    final int rssi = device.getRssi();
    if (rssi &amp;gt;= -40) {
      resId = R.mipmap.ic_signal_strong;
    } else if (rssi &amp;lt; -40 &amp;amp;&amp;amp; rssi &amp;gt; -60){
      resId = R.mipmap.ic_signal_medium;
    }
    imageView.setImageResource(resId);
  }
}
```

```xml
&lt;layout&gt;
  &lt;data&gt;
    &lt;variable name=&quot;device&quot; type=&quot;android.bluetooth.BluetoothDevice&quot; /&gt;
  &lt;/data&gt;
  &lt;linearlayout&gt;
    &lt;imageview app:signalstrength=&quot;@{device}&quot; /&gt;
    &lt;textview android:text=&quot;@{device.getName()}&quot; /&gt;
    &lt;textview android:text=&quot;@{device.getAddress()}&quot; /&gt;
  &lt;/linearlayout&gt;
&lt;/layout&gt;
```

`BindingAdapter`로 namespace를 쓰지 않는 것(`app`)과, `android`를 쓰는 것 중 어느 쪽이 좋은가요?

#### Data Binding on Custom View

당연하게도 Data Binding은 Custom View에서도 쓸 수 있다. `&lt;a href=&quot;https://github.com/BindingAdapter&quot; class=&quot;user-mention&quot;&gt;@BindingAdapter&lt;/a&gt;`를 잘못 사용하면 `attrs.xml`을 쓰고 `TypedArray`에서 Custom Attrs를 얻는 등의 일을 쉽게 할 수 있다. ~~그게 좋은지 나쁜지는 다른 문제로 두고~~.

```java
public class Pagination extends RelativeLayout {
  private ViewPaginationBinding binding;

  public Pagination(Context context) {
    this(context, null);
  }

  public Pagination(Context context, AttributeSet attrs) {
    super(context, attrs);
    binding = DataBindingUtil.inflate(LayoutInflater.from(context), R.layout.view_pagination, this, true);
  }

  public static void setListener(Pagination paginate, View target, OnPaginationClickListener listener) {
    if (listener != null) {
      target.setOnClickListener(_v -&amp;gt; listener.onClick(paginate));
    }
  }

  &lt;a href=&quot;https://github.com/BindingAdapter&quot; class=&quot;user-mention&quot;&gt;@BindingAdapter&lt;/a&gt;({&quot;android:onPrevButtonClicked&quot;})
  public static void setPrevClickListener(Pagination view, OnPaginationClickListener listener) {
    setListener(view, view.binding.btnPrevPage, listener);
  }

  &lt;a href=&quot;https://github.com/BindingAdapter&quot; class=&quot;user-mention&quot;&gt;@BindingAdapter&lt;/a&gt;({&quot;android:onNextButtonClicked&quot;})
  public static void setNextClickListener(Pagination view, OnPaginationClickListener listener) {
    setListener(view, view.binding.btnNextPage, listener);
  }

  public interface OnPaginationClickListener {
    void onClick(Pagination pagination);
  }
}
```

### ButterKnife에서 Data Binding으로 대체할 수 없는 기능들

#### Resource Binding

이 기능은 Data Binding에는 존재하지 않는다.

```java
class ExampleActivity extends Activity {
  &lt;a href=&quot;https://github.com/BindString&quot; class=&quot;user-mention&quot;&gt;@BindString&lt;/a&gt;(R.string.title) String title;
  &lt;a href=&quot;https://github.com/BindDrawable&quot; class=&quot;user-mention&quot;&gt;@BindDrawable&lt;/a&gt;(R.drawable.graphic) Drawable graphic;
  &lt;a href=&quot;https://github.com/BindColor&quot; class=&quot;user-mention&quot;&gt;@BindColor&lt;/a&gt;(R.color.red) int red; // int or ColorStateList field
  &lt;a href=&quot;https://github.com/BindDimen&quot; class=&quot;user-mention&quot;&gt;@BindDimen&lt;/a&gt;(R.dimen.spacer) Float spacer; // int (for pixel size) or float (for exact value) field
  // ...
}
```

#### View Lists

View Lists는 여러 View를 한 곳에 모아 처리하는 기능 같다. ~~이 글을 쓸 때 처음 안 기능이다~~.

```java
// 이렇게 해서…
&lt;a href=&quot;https://github.com/Bind&quot; class=&quot;user-mention&quot;&gt;@Bind&lt;/a&gt;({ R.id.first_name, R.id.middle_name, R.id.last_name })
List&lt;edittext&gt; nameViews;

// 이런 것들을 준비해주면…
static final ButterKnife.Action&lt;view&gt; DISABLE = new ButterKnife.Action&lt;view&gt;() {
  &lt;a href=&quot;https://github.com/Override&quot; class=&quot;user-mention&quot;&gt;@Override&lt;/a&gt; public void apply(View view, int index) {
    view.setEnabled(false);
  }
};

// 이런 느낌으로 한번에 쓸 수 있다！
ButterKnife.apply(nameViews, DISABLE);
```

이것도 Data Binding에서는 존재하지 않는다.

## 정리
 - ButterKnife의 기능은 대체로 Data Binding으로 대체할 수 있다.
	 - Resource Binding, View Lists만 Data Binding에서 대체 불가
 - `ViewHolder` 패턴은 모두 대체할 수 있다.
	 - `RecyclerView.ViewHolder`는 Binding의 Wrapper로 감싸주면 OK
 - `&lt;a href=&quot;https://github.com/BindingAdapter&quot; class=&quot;user-mention&quot;&gt;@BindingAdapter&lt;/a&gt;`와 `&lt;a href=&quot;https://github.com/BindingMethod&quot; class=&quot;user-mention&quot;&gt;@BindingMethod&lt;/a&gt;`를 ~~악용~~이용하면 비교적 뭐든지 할 수 있다.

## References
  - [ButterKnife](http://jakewharton.github.io/butterknife/)
  - [Data Binding Guide - Android Developers](http://developer.android.com/tools/data-binding/guide.html)
  - [Android – Data Binding 연결해봤다. – NET BIZ DIV. TECH BLOG](http://tech.recruit-mp.co.jp/mobile/android-data-binding/)
  - [The Clean Architecture - 8th Light](http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html)
  - [extensions/baseAdapters/src/main/java/android/databinding/adapters - platform/frameworks/data-binding - Git at Google](https://android.googlesource.com/platform/frameworks/data-binding/+/android-6.0.0_r7/extensions/baseAdapters/src/main/java/android/databinding/adapters)
&lt;/view&gt;&lt;/view&gt;&lt;/edittext&gt;&lt;/button&gt;&lt;/linearlayout&gt;&lt;/layout&gt;&lt;/samplerecycleradapter.bindingholder&gt;&lt;/textview&gt;&lt;/textview&gt;&lt;/textview&gt;&lt;/linearlayout&gt;&lt;/layout&gt;
</description>
        <pubDate>Wed, 25 May 2016 15:00:00 +0900</pubDate>
        <link>http://realignist.me/code/2016/05/25/data-binding-guide.html</link>
        <guid isPermaLink="true">http://realignist.me/code/2016/05/25/data-binding-guide.html</guid>
        
        <category>android</category>
        
        <category>butterknife</category>
        
        <category>dependencyinjection</category>
        
        <category>di</category>
        
        <category>development</category>
        
        
        <category>code</category>
        
      </item>
    
      <item>
        <title>[번역] 중급 이상의 Android 개발자가 Android다운 개발을 하려면 봐야할 URL 목록들</title>
        <description>&lt;p&gt;이 글은 &lt;a href=&quot;http://twitter.com/yuya_presto&quot;&gt;@yuya_presto&lt;/a&gt;님이 쓰신 &lt;a href=&quot;http://qiita.com/yuya_presto/items/ab2162078e5d5076c718&quot;&gt;글&lt;/a&gt;을 한국어로 번역한 글입니다. 일부 오역이나 의역이 있을 수 있으며 이 부분에 대해서 양해를 부탁드리며, 좋은 글을 한국어로도 번역할 수 있게 해주신 yuya_presto님께 감사하다는 말씀 드립니다.&lt;/p&gt;

&lt;p&gt;사실 글에서는 &lt;em&gt;중급 이상의&lt;/em&gt;라는 말이 들어가지만, 안드로이드 애플리케이션을 개발하는 개발자라면 꼭 알아둬야할 개념들에 대해서 이야기하는 글이라고 생각합니다.  &lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Java에 대한 이야기는 여러 이야기가 있다고 생각합니다만, Android 개발을 잘 하기 위해서 어떤 것들을 해야 좋을지에 대한 이야기를 해보고자 합니다. 개발 입문을 위한 가이드로는 이미 &lt;a href=&quot;https://github.com/mixi-inc/AndroidTraining&quot;&gt;좋은 가이드&lt;/a&gt;(일본어)가 있기 때문에 여기서는 더욱 실전적인 내용에 포커스를 맞추고자 합니다.&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;안드로이드 다운 디자인과 개발&lt;/h2&gt;

&lt;h3 id=&quot;material-design-&quot;&gt;Material Design의 가이드라인&lt;/h3&gt;

&lt;p&gt;Google이 생각한 최고(?)의 디자인 가이드라인, 그것이 머티리얼 디자인입니다.&lt;br /&gt;
&lt;a href=&quot;https://www.google.com/design/spec/material-design/introduction.html&quot;&gt;https://www.google.com/design/spec/material-design/introduction.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;사용해야할 UI 컴포넌트, ListView 등의 레이아웃, 다이얼로그를 띄울 타이밍과 표시할 내용, 화면 전환 시의 애니메이션과 사용 방법 등에 대한 설명이 다양하게 적혀있습니다. 이 내용에 따라 개발하면 상당히 현대적인 Android 앱으로 보이게 됩니다. 사용하려고 마음 먹은 UI 컴포넌트에 대해 조사하는 것만으로도 꽤 큰 효과를 발휘합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160525/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;※ 여담입니다만, iOS를 하는 사람들에게는 iOS Human Interface Guidelines가 필수 요소라고 생각합니다.&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;생명 주기&lt;/h3&gt;

&lt;p&gt;안드로이드 애플리케이션을 개발하는 것은 Java 언어를 마스터하는 것보다도 생명 주기를 마스터해야하는 일이라는 말을 스터디 등에서 나오고 있습니다. 안드로이드 개발이라고 하면 그 생명 주기를 제대로 생각하고 개발하는 것이 중요합니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.android.com/intl/ja/training/basics/activity-lifecycle/index.html&quot;&gt;공식 문서의 입문편&lt;/a&gt;에서는 재개, 일시 정지, 정지 등의 3가지 상태밖에 나오지 않지만 실제로는 엄청나게 큰 생명 주기 메소드의 호출도 있는 것입니다. (특히 Fragment가 얽혀있는 경우 더 복잡해지겠죠.)&lt;/p&gt;

&lt;p&gt;그에 대한 정리가 다음 &lt;a href=&quot;https://github.com/xxv/android-lifecycle&quot;&gt;Repository&lt;/a&gt;에 올라와있습니다. (CC-BY-SA 4.0)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160525/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;※ 여담입니다만, Android N에서 멀티윈도우가 지원되면서 onPause()와 onStop()에 대한 개념이 약간 미묘하게 복잡하게 변할 수도 있기 때문에 이 부분은 주의할 필요가 있다고 생각합니다.&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;백 스택과 태스크&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;startActivity()&lt;/code&gt;한 후 백 버튼의 동작을 제어하는 것이 백 스택과 태스크입니다. 백 버튼 뿐만이 아니라 작업 스위처(멀티태스킹 화면)에 표시해야할 내용(예를 들면 외부 메일 앱을 실행했을 때, 작업 스위처에 메일 응용 프로그램을 표시할지 여부 등…)도 주의 깊게 생각할 필요가 있습니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Android 개발자라면 누구나 백 스택과 태스크에 대해서 설명할 수 있고, AndroidManifest.xml에 나오는 launchMode의 차이점에 대해서 설명할 수 있겠지요?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;라는 말을 하는 것은 정작 &lt;a href=&quot;http://developer.android.com/intl/ja/guide/components/tasks-and-back-stack.html&quot;&gt;공식 문서&lt;/a&gt;뿐이었고, 실제 동작의 차이를 몰라서 괴로워합니다. 저는 다음 사이트를 참고해서 마침내 어떻게 돌아가는지 이해할 수 있게 되었습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://techblog.qoncept.jp/?p=102&quot;&gt;그림으로 이해하는 액티비티 스택 (Qoncept TechBlog)&lt;/a&gt; (일본어)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://y-anz-m.blogspot.jp/2011/02/androidlauchmode.html&quot;&gt;Y.A.M의 잡동사니 메모장: Android launchMode의 차이&lt;/a&gt; (일본어)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;아래 그림은 “그림으로 이해하는 액티비티 스택”에서 인용한 것입니다. 그림이 매우 알기 쉬웠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160525/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;※ 사실은 “taskAffinity”에 대해서도 알아야한다고 생각하지만, 저는 아직 이 부분에 대해서 확실하게 이해하지 못하고 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;up-&quot;&gt;Up 내비게이션&lt;/h3&gt;

&lt;p&gt;안드로이드 개발자라면 백 버튼과 왼쪽 상단의 “Up 버튼”이 어떻게 다른지 설명할 수 있죠? Up 버튼은 전에 표시된 화면으로 되돌아가는 것이 아니라 “상위 개념”으로 이동해야만 합니다. Up 내비게이션은 간과하기 쉬운 구조이므로 화면 전환이 많은 프로그램에서는 꼭 짚고 넘어가야한다고 생각합니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.android.com/intl/ko/design/patterns/navigation.html&quot;&gt;http://developer.android.com/intl/ko/design/patterns/navigation.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://realignist.me/assets/images/20160525/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;구현 방법은 &lt;a href=&quot;http://developer.android.com/intl/ko/training/implementing-navigation/ancestral.html&quot;&gt;여기&lt;/a&gt;서 확인할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;결론&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.android.com/intl/ko/index.html&quot;&gt;http://developer.android.com/intl/ko/index.html&lt;/a&gt;에 있는 정보는 API 레퍼런스를 포함해서 꽤 중요한 자료들이 많기 때문에, 시간이 있을 때 읽어두는 편이 좋습니다.&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;태블릿과 화면 회전에 대응&lt;/h2&gt;

&lt;p&gt;Android는 iOS와는 다르게 AndroidManifest.xml에서 “이 앱은 태블릿용 애플리케이션입니다.”라고 선언하지 않아도 보통 태블릿에서 사용할 수 있도록 되어있습니다. 하지만 Google Play 스토어를 보면 “이 애플리케이션은 태블릿용으로 설계되었습니다.”라고 되어있지 않으면 랭킹에 올라가지 않는 등의 문제가 있습니다.&lt;/p&gt;

&lt;p&gt;사실 이것은 옛날에는 태블릿용 스크린샷을 등록하는 것만으로도 괜찮았지만, 최근에는 사람이 직접 레이아웃을 일일히 체크하는 것 같습니다.&lt;/p&gt;

&lt;p&gt;Fragment의 사용 방법&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.android.com/intl/ko/guide/practices/tablets-and-handsets.html#Fragments&quot;&gt;http://developer.android.com/intl/ko/guide/practices/tablets-and-handsets.html#Fragments&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://qiita.com/HideMatsu/items/ddf640899cbe1b2027ed&quot;&gt;http://qiita.com/HideMatsu/items/ddf640899cbe1b2027ed&lt;/a&gt; (일본어)&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;좀 더 테크니컬한 이야기&lt;/h2&gt;

&lt;h3 id=&quot;support-library---&quot;&gt;Support Library의 최신 변경 사항&lt;/h3&gt;

&lt;p&gt;Android에서는 처음부터 사용 가능한 Fragment와 Support Library 안에 있는 Fragment로 Fragment 구현이 두가지가 있었는데, Google 직원분께서 하신 말로는 최신 기능과 버그 수정을 위해 항상 Support Library의 구현을 쓰는 것을 권장한다는 이야기를 듣고(DroidKaigi 2016 2일차 기조연설에서) Support Library의 구현체를 반드시 사용해야 한다고 생각하게 되었습니다.&lt;/p&gt;

&lt;p&gt;하지만, 버전 업으로 인하여 사양이 변경되는 일(메소드가 없어지거나)이 있을 수가 있어 주의가 필요합니다. Android Studio가 업데이트를 하라고 노란색 밑줄을 표시하고 있지만, 꾹 참으시고 우선 아래 페이지에서 어떤 사항이 바뀌었는지를 체크하고 업데이트하는 것이 바람직합니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.android.com/intl/ko/tools/support-library/index.html&quot;&gt;http://developer.android.com/intl/ko/tools/support-library/index.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;android-framework-api-diff&quot;&gt;Android Framework의 API Diff&lt;/h3&gt;

&lt;p&gt;Android의 compileSdkVersion을 올리면 메소드가 사라지는 일이 발생합니다. 최근같은 경우 Notification.Builder의 serLatestEventInfo() 메소드(API 23)가 없어져서 &lt;a href=&quot;http://stackoverflow.com/questions/32345768/cannot-resolve-method-setlatesteventinfo&quot;&gt;한바탕 소동&lt;/a&gt;이 일어났습니다.&lt;/p&gt;

&lt;p&gt;Google이 Android API Differences Report를 내고 있기 때문에 이걸 보면 각 버전에서 어떤 인터페이스가 바뀌었는지 확인할 수 있습니다.
&lt;a href=&quot;http://qiita.com/takahirom/items/b46afb73a5c8429d8675&quot;&gt;http://qiita.com/takahirom/items/b46afb73a5c8429d8675&lt;/a&gt; (일본어)&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;편리한 라이브러리 목록&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/wasabeef/awesome-android-ui&quot;&gt;wasabeef/awesome-android-ui&lt;/a&gt; ← UI 라이브러리 목록은 정말 편리합니다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/KeithYokoma/items/b5b53c94f6ab27b604e7&quot;&gt;http://qiita.com/KeithYokoma/items/b5b53c94f6ab27b604e7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이거 외에도 Qiita에 글이 많이 올라와있습니다.&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;라이브러리를 도입할 때 유용한 사이트&lt;/h3&gt;

&lt;p&gt;대부분의 라이브러리는 GitHub의 README.md에 적혀져 있습니다만, 우선 build.gradle에 무엇을 추가하면 좋을지를 찾으려면 &lt;a href=&quot;http://mvnrepository.com&quot;&gt;http://mvnrepository.com&lt;/a&gt;이 편리합니다. 일부 라이브러리는 Maven Central 대신 jCenter에만 업로드 되는 것이 있기 때문에 이런 라이브러리는 &lt;a href=&quot;https://bintray.com/bintray/jcenter&quot;&gt;bintray&lt;/a&gt;에서 찾지 않으면 안됩니다.&lt;/p&gt;

&lt;p&gt;그렇다고 해서, 뭐든 좋다고 휙휙 쓸 수 있는게 아니라 넣으면 넣을수록 빌드 시간이 길어집니다. &lt;a href=&quot;http://methodscount.com&quot;&gt;http://methodscount.com&lt;/a&gt;을 사용하면 build.gradle을 복사해서 붙여넣으면 라이브러리의 크기와 메소드의 수를 알려줍니다. (Android Studio 플러그인도 있습니다!)&lt;/p&gt;

&lt;p&gt;여담이지만, &lt;a href=&quot;https://github.com/novoda/bintray-release&quot;&gt;bintray-release&lt;/a&gt;를 사용하면 jCenter 라이브러리를 몇 번의 클릭으로 공개할 수 있으므로 꼭 공개하고 갑시다.&lt;/p&gt;

&lt;h2 id=&quot;section-8&quot;&gt;어찌됬던 일단 소스 코드를 읽는다.&lt;/h2&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ko&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Android development is about 10% writing Java. The other 90% is reading, crying, debugging, and pressing alt+enter&lt;/p&gt;&amp;mdash; Jon F Hancock (&lt;a href=&quot;https://github.com/JonFHancock&quot; class=&quot;user-mention&quot;&gt;@JonFHancock&lt;/a&gt;) &lt;a href=&quot;https://twitter.com/JonFHancock/status/702973001600364544&quot;&gt;2016년 2월 25일&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;울며 겨자먹기로 코드를 읽고, Alt + Enter를 연타하는 것이 안드로이드 개발입니다. URL 등을 이야기했지만 코드를 읽는 것이 안드로이드 개발입니다. 중요하니까 두번 말했습니다. 우선 문제가 있으면 공식 이슈 트래커 등에 찾아보고, 나오지 않을 경우 아래의 URL을 이용해서 SDK 소스 코드를 읽을 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://sites.google.com/site/devcollaboration/codesearch&quot;&gt;소스 코드 검색 (OpenGrok)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/android&quot;&gt;GitHub의 안드로이드 미러&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/android/platform_frameworks_base&quot;&gt;Android Framework의 Mirror Repository&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/android/platform_frameworks_support&quot;&gt;Support Library의 Mirror Repository&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Android Studio SDK의 소스 코드를 참조해서 읽는 방법 &lt;a href=&quot;http://qiita.com/makoto_kw/items/032e210aecf57deeb5a5&quot;&gt;(조금 낡은 기사)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-9&quot;&gt;샘플 애플리케이션과 읽어봐야 할 부분&lt;/h3&gt;

&lt;p&gt;konifar 씨의 DroidKaigi 2016의 애플리케이션은 간단하게 정보를 표시하고 즐겨찾기 등을 관리할 수 있는 샘플 응용 프로그램으로 매우 깨끗한 코드라고 정평이 나 있습니다. 우리들의 신, Jake Wharton 씨의 u2020도 일부를 차용했다는 이야기를 간혹 듣기 때문에 분명 뭔가 얻을 수 있을 것입니다. 확인하니 RxJava라던가 Retrofit 2 등의 현대적인 구성으로 되어있는 것 같습니다.&lt;/p&gt;

&lt;p&gt;ActivityThread나 FragmentManager쪽은 생명주기와 관련해서 제대로 문서화되지 않은 동작(화면 회전 시, 처음부터 끝까지 다른 처리를 Main Thread에서 하는 것인지 궁금한 소박한 의문 등…)을 확인하기 위해 읽어둘 필요가 있을지도 모릅니다. 저는 읽게 되었습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/android/platform_frameworks_base/blob/master/core/java/android/app/ActivityThread.java&quot;&gt;https://github.com/android/platform_frameworks_base/blob/master/core/java/android/app/ActivityThread.java&lt;/a&gt;
&lt;a href=&quot;https://github.com/android/platform_frameworks_base/blob/master/core/java/android/app/ActivityThread.java&quot;&gt;https://github.com/android/platform_frameworks_support/blob/master/v4/java/android/support/v4/app/FragmentManager.java&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-10&quot;&gt;마치며&lt;/h2&gt;
&lt;p&gt;일본에서는 iOS 사용자가 많기 때문인지 iOS 개발자가 더 우세하고 Android는 iOS의 디자인 카피같은 시안도 많이 받고 외롭습니다. Android 다운 멋진 애플리케이션을 늘려갑시다.&lt;/p&gt;
</description>
        <pubDate>Wed, 25 May 2016 02:30:00 +0900</pubDate>
        <link>http://realignist.me/code/2016/05/25/better-android-developer-guide.html</link>
        <guid isPermaLink="true">http://realignist.me/code/2016/05/25/better-android-developer-guide.html</guid>
        
        <category>android</category>
        
        <category>lifecycle</category>
        
        <category>development</category>
        
        
        <category>code</category>
        
      </item>
    
  </channel>
</rss>
